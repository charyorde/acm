<?php 
/*
 * Implements hook_menu
 */
function nurspri_school_menu() {
  $items = array();
  // menu is only available if this module is enabled
	$items['admission/apply/class'] = array(
		'title' => t('Application to [School name]'),
		'description' => t('Student application for admission to a school'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('nurspri_school_admission_class_form'),
		'access arguments' => array(''), // edit admission form 
		'access callback' => TRUE 
	);
	$items['admission/apply/sponsor'] = array(
		'title' => t('Application to [School name]'),
		'description' => t('Student application for admission to a school'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('nurspri_school_admission_sponsors_form'), // function callback
		'access arguments' => array(''), // edit admission form 
		'access callback' => TRUE // remove if access arguments is set
	);
	$items['admission/apply/nextofkin'] = array(
		'title' => t('Application to [School name]'),
		'description' => t('Student application for admission to a school'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('nurspri_school_admission_nextofkin_form'), // function callback
		'access arguments' => array(''), // edit admission form
		'access callback' => TRUE // remove if access arguments is set
	); 
	$items['admission/apply/health'] = array(
		'title' => t('Application to [School name]'),
		'description' => t('Student application for admission to a school'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('nurspri_school_admission_health_form'), // function callback
		'access arguments' => array(''), // edit admission form
		'access callback' => TRUE // remove if access arguments is set
	);
	$items['admission/apply/examresults'] = array(
		'title' => t('Application to [School name]'),
		'description' => t('Student application for admission to a school'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('nurspri_school_admission_examresults_form'), // function callback
		'access arguments' => array(''), // edit admission form
		'access callback' => TRUE // remove if access arguments is set
	); 
	// edit a student subject
	$items['admin/settings/school/subject/%acm_school_subject/edit'] = array(
		'title' => t('Configure subject'),
		'description' => t('School subject settings'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('nurspri_school_addsubject_form', 4),
		'access arguments' => array('administer subject settings'),
		'type' => MENU_CALLBACK,
		'load arguments' => array(4)
    );
	// edit a student grade
	$items['admin/settings/school/grade/%acm_school_grade/edit'] = array(
		'title' => t('Edit grade'),
		'description' => t('Edit a student grade'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('nurspri_school_grade_form', 4),
		'type' => MENU_CALLBACK,
		'load arguments' => array(4)
	);
	// edit a student score
	$items['admin/settings/school/score/%acm_school_score/edit'] = array(
		'title' => t('Edit score'),
		'description' => t('Edit a student score'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('nurspri_school_score_form', 4),
		'type' => MENU_CALLBACK,
		'load arguments' => array(4)
	);
	return $items;
 
}
/**
 * Implements hook_acm_roles 
 * 
 * Defines default roles needed in a nursery for school module
 */
function nurspri_school_acm_roles(){
	return array ();
}
/**
 * Implements hook_acm_roles_perm
 * 
 * Assigns permission(s) to role(s) 
 */
function nurspri_school_acm_roles_perm(){
	return array('Head teacher');
}
/**
 * Implements hook_school_setting 
 */
function nurspri_school_school_settings() {
  $settings['type'] = 'configure';
	$settings['configure']['admission'] = array(
		'title' => t('Set admission status'),
		'callback url' => 'admin/settings/school/admission/status'
	);
	$settings['configure']['users'] = array(
		'title' => t('Configure users'),
		'callback url' => 'admin/settings/school/users'
	);
	$settings['configure']['fees'] = array(
		'title' => t('Configure fees'),
		'callback url' => 'admin/settings/school/fees'
	);
	$settings['configure']['teacher'] = array(
		'title' => 'Add teacher',
		'callback url' => 'admin/settings/school/teacher/add'
	);
	$settings['configure']['grade'] = array(
		'title' => t('Configure grade system'),
		'callback url' => 'admin/settings/school/grade/gradingsystem'
	);
	
	$settings['configure']['school_settings'] = drupal_get_form('nurspri_school_school_settings_form'); 
	
	return $settings;
}
function nurspri_school_school_settings_form() {
	$form['#attributes'] = array('class' => 'form-horizontal');
	return system_settings_form($form);
}
/**
 * Implements hook_admission_settings 
 */
function nurspri_school_admission_settings($type) {
	$settings['type'] = 'admission';
	$settings['admission']['configure'] = array(
		'title' => 'Configure',
		'callback url' => 'admin/settings/school/'
	);
	$settings['admission']['view applications'] = array(
		'title' => 'View applications',
		'callback url' => 'admission/applications'
	);
	if($type == 'status') {
		$settings['admission']['admission_status_form'] = drupal_get_form('nurspri_school_admission_settings_form');
	}
	return $settings;
}
function nurspri_school_admission_settings_form(&$form_state) {
  $form['#attributes'] = array('class' => 'form-horizontal');
  $form['admission_status'] = array(
    '#type' => 'select',
    '#title' => t('Admission status'),
    '#default_value' => variable_get('admission_status', ''),
    '#options' => array('Open', 'Closed'),
    '#description' => t('Admission status'),
  );
  $form['academic_session'] = array(
    '#type' => 'textfield',
    '#title' => t('Academic session'),
    '#default_value' => variable_get('academic_session', ''),
    '#description' => t('Set the current academic session')
);
  $form['#submit'][] = 'nurspri_school_admission_settings_form_submit';
  return system_settings_form($form);
}

function nurspri_school_admission_settings_form_submit($form, &$form_state) {
  $session = $form_state['values']['academic_session'];
  AcademicSession::addAcademicSession($session);
 
}
/**
 * implements hook_term_type
 */
function nurspri_school_term_type() {
	return array('term_type', 'Annual');
}
/**
 * Implements hook_faculty_settings 
 */
function nurspri_school_faculty_settings($type) {
	$settings['type'] = 'teacher';
	$settings['teacher']['add'] = array(
		'title' => t('Add'),
		'callback url' => 'admin/settings/school/teacher/add'
	);
	$settings['teacher']['view'] = array(
		'title' => 'View teacher',
		'callback url' => 'teacher'
	);
	if($type == 'add') {
		$settings['teacher']['add_teacher_form'] = drupal_get_form('nurspri_school_teacher_form');
	}
  
  return $settings;
}
/**
 * Teacher add and edit form
 * 
 * @param type $form_state
 * @param type $edit
 * @return boolean 
 */
function nurspri_school_teacher_form(&$form_state, $teacher = NULL, $edit = NULL) {
	$edit = (empty($form_state['values'])) ? (array)$teacher : $form_state['values'];

	if($edit) {
		drupal_set_title('Edit teacher');
	}else {
		drupal_set_title('Add teacher');
	}

	$form['#attributes'] = array('class' => 'form-horizontal');
	$form['name'] = array(
		'#type' => 'textfield',
		'#title' => t('Name'),
		'#default_value' => $edit['name'],
		'#required' => TRUE,
		'#attributes' => array('class' => 'faculty-name'),
	);
	$form['machine_name'] = array(
		'#type' => 'textfield',
		'#title' => t('Machine-readable name'),
		'#description' => t('Example: social_science'). '<br/>' .t('May only contain lowercase letters, numbers and underscores. <strong>Try to avoid conflicts with the names of existing modules.</strong>'),
		'#required' => TRUE,
		'#default_value' => $edit['machine_name'],
		'#attributes' => array('class' => 'faculty-name-machine'),
		'#element_validate' => array('acm_school_settings_validate_field'),
	);
	// If recreating this feature, disable machine name field and blank out
	// js-attachment classes to ensure the machine name cannot be changed.
	if (isset($edit)) {
		$form['machine_name']['#value'] = $edit['name'];
		$form['machine_name']['#disabled'] = TRUE;
		$form['machine_name']['#attributes'] = array();
	}
	$form['description'] = array(
		'#type' => 'textfield',
		'#title' => t('Description'),
		'#default_value' => $edit['description']
	);
	$form['teachercode'] = array(
		'#type' => 'textfield',
		'#title' => t('Teacher code'),
		'#default_value' => $edit['teachercode'],
		'#required' => TRUE
	);
	$form['emailsubdomain'] = array(
		'#type' => 'textfield',
		'#title' => t('Email subdomain'),
		'#default_value' => $edit['emailsubdomain']
	);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => isset($faculty) ? 'Update' : 'Save',
		'#attributes' => array('class' => 'btn'),
	);

	$form['_teacher'] = array('#type' => 'value', '#value' => $edit);
	if(!isset($teacher)) {
		$form['created'] = array('#type' => 'value', '#value' => time());
	}else {
		$form['updated'] = array('#type' => 'value', '#value' => time());
		$form['_loaded'] = array('#type' => 'value', '#value' => $teacher);
	}
	return $form;
}
function nurspri_school_teacher_form_validate($form, &$form_state) {
	$teacher = $form_state['values']['_teacher'];
    $teacher_name = $form_state['values']['name'];
    $teacher_code = $form_state['values']['teachercode'];
    $fields = drupal_schema_fields_sql('faculty');

    $op = $form_state['values']['op'];
    if($op != 'Update') {
        // does teacher name exist?
        if(in_array($teacher_name, Faculty::listFaculty($fields))) {
            form_error($form['name'], t('The teacher, @name already exist', array('@name' => $teacher_name)));
        }
        // does teacher_code exist?
        if(in_array($teacher_code, Faculty::listFaculty($fields))) {
            form_error($form['code'], t('The teacher code, @code already exist', array('@code' => $teacher_code)));
        }
    
    }
}
function nurspri_school_teacher_form_submit($form, &$form_state) {
	$teacher = $form_state['values']['_teacher'];
	$loaded = $form_state['values']['_loaded'];

	/*$created = time();
	$form_state['values']['created'] = $created;*/
	$teacher_table = 'faculty';
	$success = FALSE;

	if(!empty($teacher)) {
	// it's an edit
	//$success = drupal_write_record($teacher_table, $faculty, 'id');
		db_query("UPDATE {faculty} SET name = '%s', facultycode ='%s', description = '%s', emailsubdomain = '%s', updated = %d WHERE id = %d", $form_state['values']['name'], $form_state['values']['teachercode'], $form_state['values']['description'], $form_state['values']['emailsubdomain'], $form_state['values']['updated'], $loaded['id']);
	  $success = TRUE;
	if($success) {
		drupal_set_message('Update completed successfully');
		return;
	}
	}
	drupal_write_record($teacher_table, $form_state['values']);
	$success = TRUE;
	if($success) {
		drupal_set_message('Teacher created successfully');
  }
}
/**
 * assign teacher for a subject
 */
function nurspri_school_teacher_subj_form(&$form_state, $dept = NULL, $edit = NULL) {
	// assign teacher for a subject
}
/**
 * Validate teacher for a subject
 */
function nurspri_school_teacher_subj_form_validate($form, &$form_state) {
	// validate teacher for a subject
}
function nurspri_school_teacher_subj_form_submit($form, &$form_state) {
    // submit code
}

/**
 * Implements hook_department_settings 
 */
function nurspri_school_department_settings($type) {
	//not required
}
function nurspri_school_programme_settings($type) {
	//not required
}
function nurspri_school_programme_form(&$form_state, $programme = NULL, $edit = NULL) {
	//not required
}
function nurspri_school_programme_form_validate($form, &$form_state) {
    //not required
}
function nurspri_school_programme_form_submit($form, &$form_state) {
    //not required
}
function nurspri_school_student_application_table_info() {
  $table['course_info'] = array(
    'primary key' => 'id'
  );
  return $table;
}
/**
 * 
 * 
 * @param type $form_state
 * @param type $edit
 * @param type $dept 
 */
function nurspri_school_addsubject_form(&$form_state, $subject = NULL, $edit = NULL) {
    $edit = (empty($form_state['values'])) ? (array)$subject : $form_state['values'];
  
	if($edit) {
		drupal_set_title('Edit subject');
	}else {
		drupal_set_title('Add subject');
	}

	// @todo $fields = module_invoke($module, 'course_field_info');
	// snippet: if(isset($fields['title'])
	$form['#attributes'] = array('class' => 'form-horizontal');
	// subject title
	$form['title'] = array(
		'#type' => 'textfield',
		'#title' => t('Subject title'),
		'#description' => t('The subject title'),
		'#default_value' => $edit['title'],
		'#required' => TRUE
	);
	// level
	$level = module_invoke('nurspri_school', 'academic_level');
	$form['level'] = array(
		'#type' => 'select',
		'#title' => t('Academic level'),
		//'#options' => AcademicLevel::listAcademicLevels(),
		//'#options' => drupal_map_assoc(array(100, 200, 300, 400, 500)),
		'#options' => $level,
		'#default_value' => $edit['level'],
		'#required' => TRUE
	);
	// Subject code
	$form['code'] = array(
		'#type' => 'textfield',
		'#title' => t('Subject code'),
		'#description' => t('The subject code'),
		'#default_value' => $edit['code'],
		'#required' => TRUE
	);
	// academic session
	$form['session'] = array(
		'#type' => 'select',
		'#title' => t('Academic session'),
		'#description' => t('The academic session this course is available for'),
		'#options' => AcademicSession::listAcademicSession(),
		'#default_value' => $edit['session'],
		'#required' => TRUE
	);
	// Teacher
	$teachers = acm_school_get_users_in_a_role(37);
	$form['teacherincharge'] = array(
		'#type' => 'select',// separate by a comma
		'#title' => t('Subject teacher'),
		'#description' => t('Subject assigned to a teacher'),
		'#options' => $teachers, // a list of lecturers in the school
		'#default_value' => $edit['lecturerincharge'],
		'#required' => TRUE
	);
	$form['exam_score_id'] = array(
		'#type' => 'textfield',
		'#title' => t('Exam score'),
		'#description' => t('This subject exam score'),
		'#default_value' => $edit['exam_score_id']
	);
	$form['maxexammark'] = array(
		'#type' => 'textfield',
		'#title' => t('Maximum exam mark'),
		'#description' => t('An exam score maximum mark. For example, 100 is the maximum mark for an exam score of 50/100'),
		'#default_value' => $edit['maxexammark']
	);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => isset($course) ? 'Update' :  'Save',
		'#attributes' => array('class' => 'btn'),
	);
  
	$form['_subject'] = array('#type' => 'value', '#value' => $edit);
	if(!isset($subject)) {
		$form['created'] = array('#type' => 'value', '#value' => time());
	} else {
		$form['updated'] = array('#type' => 'value', '#value' => time());
		$form['_loaded'] = array('#type' => 'value', '#value' => $subject);
	}
  return $form;
}
function nurspri_school_addsubject_form_validate($form, &$form_state) {
	$subject = $form_state['values']['_subject'];
    $subject_title = $form_state['values']['title'];
    $subject_code = $form_state['values']['code'];
    $fields = drupal_schema_fields_sql('academic_course');
    $op = $form_state['values']['op'];

    if($op != 'Update') {
        // does subject title exist?
        if(in_array($subject_title, Course::listCourses($fields))) {
            form_error($form['title'], t('The subject title @title already exist', array('@title' => $subject_title)));
        }
        // does subject code exist?
        if(in_array($subject_code, Course::listCourses($fields))) {
            form_error($form['code'], t('The subject code @name already exist.', array('@code' => $subject_code)));
        }
    }
}
function nurspri_school_addsubject_form_submit($form, &$form_state) {
	$subject = $form_state['values']['_subject'];
	$loaded = $form_state['values']['_loaded'];
	$subject_table = 'academic_course';
	$success = FALSE;
  
	if(!empty($subject)) {
		db_query("UPDATE {academic_course} SET title = '%s',  code = '%s', level = '%s', session = '%s', lecturerincharge = '%s', exam_score_id = %d, maxexammark = %d, updated = %d WHERE id = %d", $form_state['values']['title'], $form_state['values']['code'],  $form_state['values']['level'], $form_state['values']['session'], $form_state['values']['teacherincharge'],$form_state['values']['exam_score_id'], $form_state['values']['maxtestmark'],  $form_state['values']['updated'], $loaded['id']);
		
		$success = TRUE;
		if($success) {
			drupal_set_message('Update completed successfully');
			return;
		}
	}
  
	$success = drupal_write_record($subject_table, $form_state['values']);
	$subject_id = db_fetch_object(db_query("SELECT MAX(id) as id FROM {$subject_table}"));
	if($success) {
		if(isset($subject_id)) {
			call_user_func_array('acm_school_create_batch_course_content', array($subject_id));
		}
	} else {
		drupal_set_message("Something dangerous happened! Couldn't save new Course", 'error');
	}
}
function nurspri_school_course_settings($subject) {
	$form['#attributes'] = array('class' => 'form-horizontal');
	$form['exam_maximum_mark'] = array(
	'#type' => 'textfield',
	'#title' => t('Exam maximum mark'),
	'#default_value' => variable_get('exam_maximum_mark', (int)'')
	);
	return system_settings_form($form);
}
/**
 * Implements hook_grade_settings 
 */
function nurspri_school_grade_settings($type){
	$settings['type'] = 'grade';
	$settings['grade']['grade a student'] = array(
		'title' => 'Grade a student',
		'callback url' => 'admin/settings/school/grade/add'
	);
	$settings['grade']['score a student'] = array(
		'title' => 'Score a student',
		'callback url' => 'admin/settings/school/score/add'
	);
	return $settings;
  
	if($type == 'add') {
		$settings['grade']['grade_form'] = drupal_get_form('nurspri_school_grade_form');
	}
  
  return $settings;
}
function nurspri_school_gradingsystem_settings_form(&$form_state) {
	//not needed
}


function nurspri_school_grade_form(&$form_state, $grade = NULL, $edit = NULL ) {
	$edit = (empty($form_state['values']))? $grade : $form_state['values'];

	if($edit) {
		drupal_set_title('Edit Grade');
	}else {
		drupal_set_title('Add Grade');
	}
	$form['#attributes'] = array('class' => 'form-horizontal');
	$students = acm_school_get_users_in_a_role(29);

	// student uid
	$form['uid'] = array(
		'#type' => 'select',
		'#title' => t('Student'),
		'#description' => t('Select student to grade'),
		'#options' => $students,
		'#default_value' => $edit['uid'],
		'#required' => TRUE
	);
	// automatically populated when student uid is selected
	$form['subject'] = array(
		'#type' => 'select',
		'#title' => t('Subject'),
		'#description' => t('Student subject'),
		'#options' => array(),
		'#default_value' => $edit['subject'],
		'#required' => TRUE 
	);
	$form['dropped'] = array(
		'#type' => 'checkbox',
		'#title' => t('Is subject dropped?'),
		'#description' => t('Whether subject is dropped or not'),
		'#default_value' => $edit['dropped']
	);
	$form['grade'] = array(
		'#type' => 'textfield',
		'#title' => t('Grade'),
		'#description' => t('Grade representation of a score based on Grading system'),
		'#default_Value' => $edit['grade']
	);
	$form['exam_score_id'] = array(
		'#type' => 'textfield',
		'#title' => t('Exam score'),
		'#description' => t('Student exam score'),
		'#default_value' => $edit['exam_score_id'],
		'#required' => TRUE 
	);
	$form['totalscore'] = array(
		'#type' => 'textfield',
		'#title' => t('Total score'),
		'#description' => t('Total score (exam score)'),
		'#default_value' => $edit['totalscore']
	);
	$form['submittedby'] = array(
		'#type' => 'select',
		'#title' => t('Submitted by'),
		'#description' => t('Select the teacher  who submitted the grade'),
		'#default_value' => $edit['submittedby'],
		'#options' => array(),
		'#required' => TRUE
	);
	$form['submitted'] = array(
		'#type' => 'checkbox',
		'#title' => t('Submitted for approval?'),
		'#description' => t('Whether this grade is submitted for approval or not'),
		'#default_value' => $edit['submitted'],
		'#required' => TRUE
	);
	$form['approved'] = array(
		'#type' => 'checkbox',
		'#title' => t('Is grade approved?'),
		'#description' => t('Whether this grade has been approved or not'),
		'#default_value' => $edit['approved']
	);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => isset($score) ? 'Update' : 'Save',
		'#attributes' => array('class' => 'btn'),
	);
	$form['_grade'] = array('#type' => 'value', '#value' => $edit);
	$form['created'] = array('#type' => 'value', '#value' => time());
	if(isset($grade)) {
	  $form['state'] = array('#type' => 'value', '#value' => 'update');
	  $form['updated'] = array('#type' => 'value', '#value' => time());
	  $form['_loaded'] = array('#type' => 'value', '#value' => $grade);
	}

	return $form;
}

function nurspri_school_grade_form_validate($form, &$form_state) {

}

function nurspri_school_grade_form_submit($form, &$form_state) {

}
/**
 * @deprecated
 * @return type 
 */
function nurspri_school_grade_settings_form() {
  
}

/**
 * Implements hook_fees_type 
 */
function nurspri_school_fees_type() {
	return array('General');
}
/**
 * implements hook_faculty 
 */
function nurspri_school_faculty() {
	//not needed
}

/**
 * implements hook_department 
 */
function nurspri_school_department() {
	//not needed
}

/**
 * Implements hook_grade 
 */
function nurspri_school_grade() {
  $grade_view = views_get_view('uni_grade_view');
  return $grade_view;
}
/**
 * Implements hook_fees 
 */
function nurspri_school_fees() {
  
}
/**
 * Implements hook_admission 
 * 
 * Landing page of Admission
 */
function nurspri_school_admission() {
  $admission_view = views_get_view('uni_admission_view');
  return $admission_view;
}
/**
 * Implements hook_fees_catalog 
 */
function nurspri_school_fees_catalog_info() {
  return array();
}

/**
 * Implements hook_acm_student_application 
 */
function nurspri_school_acm_student_application() {
  global $user;
  // profile = StudentProfile::getStudentProfile($user);
  // courseinfo = CourseInfo::getCourseInfo($user);
  // student_sponsorinfo = SponsorsInfo::getSponsors($user);
  // student_nextofkininfo = NextOfKinInfo::getNextOfKinInfo($user);
  // student_healthinfo = HealthInfo::getHealthInfo($user);
  // student_results = ExaminationResult::getResults($user);
  // studentApplication = new StudentApplication($user);
    
  switch($_GET['edit']) {
  case 'app':
      // $student_application object for the current student
      $profile = acm_school_profile_load($user->uid);
      //  drupal_get_form('uni_school_admission_course_form', $profile);
      return drupal_get_form('acm_school_student_profile_form', (array)$profile->profile, NULL);
	}
	switch($_GET['edit']) {
	case 'app':
		$profile = acm_school_profile_load($user->uid);
		return drupal_get_form('acm_school_student_profile_form', (array)$profile->profile, NULL);
	}
	switch($_GET['app']) {
	case 'sponsor':
		drupal_set_title('Sponsor');
		$studentApplication = views_get_view('uni_student_application_view');
		$studentApplication->display = 'sponsor';
	break;
	case 'class':
		drupal_set_title('Class');
		$studentApplication = views_get_view('uni_student_application_view');
		$studentApplication->display = 'class';
	break;
	case 'nextofkin':
		drupal_set_title('Next of Kin');
		$studentApplication = views_get_view('uni_student_application_view');
		$studentApplication->display = 'nextofkin';
	break;
	default:
		$studentApplication = views_get_view('uni_student_application_view');
		$studentApplication->display = 'default';
	break;
	}
	return $studentApplication;
	
}

/**
 * Implements hook_student_application_items
 */
function nurspri_school_student_application_items() {
  $items = array();
  $items['sponsor'] = array(
    'data' => l('Sponsor Information', 'application/sponsor')
  );
  $items['class'] = array(
		'data' => l('Class Information', 'application/class')
	);
  return $items;

}


/**
 * Proposal: A proposal to replace acm_school_admission_application_callback
 * 
 * This hook defines the structure of admission application steps that 
 * can be implemented per school type. At the end of every application step,
 * this hook is looked up to determine what application form is next
 * 
 * @example 
 */
function nurspri_school_admission_application_info() {
  $application_form = array(
   
    'class' => array(
      'title' => 'class',
      'form_id' => 'nurspri_school_admission_class_form'
    ),
    'sponsor' => array(
      'title' => 'sponsor',
      'form_id' => 'nurspri_school_admission_sponsors_form'
    ),
    'nextofkin' => array(
      'title' => 'nextofkin',
      'form_id' => 'nurspri_school_admission_nextofkin_form'
    ),
    'health' => array(
      'title' => 'health',
      'form_id' => 'nurspri_school_admission_health_form'
    ),
  );
  return $application_form;
}

/**
 * Implements hook_admission_form_id
 * @return string 
 */
function nurspri_school_admission_form_id() {
  return 'nurspri_school_admission_form';
}

function nurspri_school_admission_class_form(&$form_state, $class_info, $steps_order, $hook) {
	$edit = (empty($form_state['values'])) ? (array)$class_info : $form_state['values'];
  
	$form['#attributes'] = array('class' => 'form-horizontal');
	$form['class_info'] = array(
		'#type' => 'markup',
		'#value' => '<div style="background:#f6f6f2; padding:5px">Class Information</div>',
	);
	$form['level'] = array(
		'#type' => 'select',
		'#title' => t('Academic level'),
		'#default_value' => $edit['level'],
		'#required' => TRUE,
		'#options' => array('100', '200', '300', '400', '500'), // get values from StudentLevel class
	);
	$form['yearofentry'] = array(
		'#type' => 'select',
		'#title' => t('Year of entry'),
		'#options' => array('2013', '2012'), // display 10 years + the current year
		'#default_value' => $edit['yearofentry'],
		'#required' => TRUE,
	);
	$form['registeredsession'] = array(
		'#type' => 'select',
		'#title' => t('Academic session'),
		'#default_value' => $edit['registeredsession'], // the current academic session
		'#options' => AcademicSession::listAcademicSession(),
		'#description' => t('The academic session you are registering for'),
		'#required' => TRUE,
	);
 
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Save and continue',
		'#attributes' => array('class' => 'btn')
	);
  
	$form['_current'] = array('#type' => 'value', '#value' => $hook);
	$form['_next'] = array('#type' => 'value', '#value' => 'sponsor');
	$form['_steps'] = array('#type' => 'value', '#value' => $steps_order);
	$form['_class_info'] = array('#type' => 'value', '#value' => $class_info);
  
  return $form;
}

function nurspri_school_admission_class_form_submit($form, &$form_state) {
	$current = $form_state['values']['_current'];
	$next = $form_state['values']['_next'];
	$class_info = $form_state['values']['_class_info'];
  
	$class_info_table = 'course_info';
	$tracker = db_result(db_query("SELECT step FROM {student_application_tracker} WHERE email = '%s'", $email));
	$success = FALSE;
  
	if(!empty($class_info)) {
		// it's an edit
		$success = drupal_write_record($class_info_table, $class_info, 'id');
		if($success) {
		  drupal_set_message('Update completed successfully');
		  return;
		}
	}
  
	drupal_write_record($class_info_table, $form_state['values']);
	// also update student_application_tracker
	$tracker_data = array('email' => base64_decode($_GET['c']), 'step' => $next);
	drupal_write_record('student_application_tracker', $tracker_data, 'email');
  
	$success = TRUE;
	if($success) {
		drupal_goto('admission/apply', 'step=' . $next . '&c=' . $_GET['c']); 
	}
}

/**
 * Saves or update course_info 
 */
function nurspri_school_course_info_save() {
  
}

/**
 * Menu callback for admission/apply/sponsor
 * @return string 
 */
function nurspri_school_admission_sponsors_form(&$form_state, $sponsors_info, $steps_order, $hook) {
  $edit = (empty($form_state['values'])) ? (array)$sponsors_info : $form_state['values'];
  
  $form['#attributes'] = array('class' => 'form-horizontal');
  $form['sponsors'] = array(
    '#type' => 'markup',
    '#value' => '<div style="background:#f6f6f2; padding:5px">Sponsors Information</div>',
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Full names'),
    '#default_value' => $edit['name'],
    '#required' => TRUE,
  );
  $form['address1'] = array(
    '#type' => 'textfield',
    '#title' => t('Address1'),
    '#default_value' => $edit['address1'],
    '#required' => TRUE,
  );
  $form['address2'] = array(
    '#type' => 'textfield',
    '#title' => t('Address2'),
    '#default_value' => $edit['address2'],
  );
  $form['nationality'] = array(
    '#type' => 'select',
    '#title' => t('Nationality'),
    '#options' => array(0 => 'Nigeria', 1 => 'Togo'),
    '#default_value' => $edit['nationality'],
    '#required' => TRUE,
  );
 
  $form['state'] = array(
    '#type' => 'select',
    '#title' => t('State'),
    '#options' => array(0 => 'Other'),
    '#default_value' => $edit['state'],
    '#required' => TRUE,
  );
  $form['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#default_value' => $edit['phone'],
  );
  $form['mobile'] = array(
    '#type' => 'textfield',
    '#title' => t('Mobile'),
    '#default_value' => $edit['mobile'],
    '#required' => TRUE
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Next',
    '#attributes' => array('class' => 'btn')
  );
  
  $form['_current'] = array('#type' => 'value', '#value' => $hook);
  $form['_next'] = array('#type' => 'value', '#value' => 'nextofkin');
  $form['_steps'] = array('#type' => 'value', '#value' => $steps_order);
  $form['_sponsors_info'] = array('#type' => 'value', '#value' => $sponsors_info);
  
  return $form;
}

function nurspri_school_admission_sponsors_form_submit($form, &$form_state) {
  
  $current = $form_state['values']['_current'];
  $next = $form_state['values']['_next'];
  $sponsors_info = $form_state['values']['_sponsors_info'];
  
  $sponsors_info_table = 'sponsors_info';
  $success = FALSE;
  
  if(!empty($sponsors_info)) {
    // it's an edit
    $success = drupal_write_record($sponsors_info_table, $sponsors_info, 'id');
    if($success) {
      drupal_set_message('Update completed successfully');
      return;
    }
  }
  
  drupal_write_record($sponsors_info_table, $form_state['values']);
  // also update student_application_tracker
  $tracker_data = array('email' => base64_decode($_GET['c']), 'step' => $next);
  drupal_write_record('student_application_tracker', $tracker_data, 'email');  
  
  // update student_application
  $student_application['sponsors_infoid'] = db_last_insert_id($sponsors_info_table, 'id');
  drupal_write_record('student_application', $student_application, 'id');
  
  $success = TRUE;
  if($success) {
    drupal_goto('admission/apply', 'step=' . $next . '&c=' . $_GET['c']); 
  }
}

/**
 * Save or update sponsors_info 
 */
function nurspri_school_sponsors_save() {
  
}

function nurspri_school_admission_nextofkin_form(&$form_state, $nextofkin_info, $steps_order, $hook) {
  $edit = (empty($form_state['values'])) ? (array)$nextofkin_info : $form_state['values'];
  
  // register previous form as sponsors (this is kind of optional)
  $form['#attributes'] = array('class' => 'form-horizontal');
  $form['nextofkin'] = array(
    '#type' => 'markup',
    '#value' => '<div style="background:#f6f6f2; padding:5px">Next of kin Information</div>',
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Full names'),
    '#default_value' => $edit['name'],
    '#required' => TRUE,
  );
  $form['address1'] = array(
    '#type' => 'textfield',
    '#title' => t('Address1'),
    '#default_value' => $edit['address1'],
    '#required' => TRUE,
  );
  $form['address2'] = array(
    '#type' => 'textfield',
    '#title' => t('Address2'),
    '#default_value' => variable_get('address2', ''),
  );
  $form['relationship'] = array(
    '#type' => 'select',
    '#title' => t('Relationship'),
    '#options' => NextOfKinRelationship::listNextOfKinRelationship(),
    '#default_value' => $edit['relationship'],
    '#required' => TRUE,
  );
  $form['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#default_value' => $edit['phone'],
  );
  $form['mobile'] = array(
    '#type' => 'textfield',
    '#title' => t('Mobile'),
    '#default_value' => $edit['mobile'],
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Next',
    '#attributes' => array('class' => 'btn')
  );
  
  $form['_current'] = array('#type' => 'value', '#value' => $hook);
  $form['_next'] = array('#type' => 'value', '#value' => 'health');
  $form['_steps'] = array('#type' => 'value', '#value' => $steps_order);
  $form['_nextofkin_info'] = array('#type' => 'value', '#value' => $nextofkin_info);
  
  return $form;
}

function nurspri_school_admission_nextofkin_form_submit($form, &$form_state) {
  
  $next = $form_state['values']['_next'];
  $nextfkin_info = $form_state['values']['_nextofkin_info'];
  
  $nextofkin_info_table = 'next_of_kin_info';
  $success = FALSE;
  
  if(!empty($nextfkin_info)) {
    // it's an edit
    $success = drupal_write_record($nextofkin_info_table, $nextfkin_info, 'id');
    if($success) {
      drupal_set_message('Update completed successfully');
      return;
    }
  }
  
  drupal_write_record($nextofkin_info_table, $form_state['values']);
  // also update student_application_tracker
  $tracker_data = array('email' => base64_decode($_GET['c']), 'step' => $next);
  drupal_write_record('student_application_tracker', $tracker_data, 'email');
  
  // update student_application
  $student_application['next_of_kin_infoid'] = db_last_insert_id($nextofkin_info_table, 'id');
  drupal_write_record('student_application', $student_application, 'id');
  
  $success = TRUE;
  if($success) {
    drupal_goto('admission/apply', 'step=' . $next . '&c=' . $_GET['c']); 
  }
}

/**
 * Save or update nextofkin_info 
 */
function uni_school_nextofkin_save() {
  
}

function nurspri_school_admission_health_form(&$form_state, $health_info, $steps_order, $hook) {
  $form['#attributes'] = array('class' => 'form-horizontal');
  $form['sponsors'] = array(
    '#type' => 'markup',
    '#value' => '<div style="background:#f6f6f2; padding:5px">Health Information</div>',
  );
  $form['status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#options' => HealthStatus::listHealthStatus(),
    '#default_value' => $edit['health'], 
    '#required' => TRUE,
  );
  $form['disabilities'] = array(
    '#type' => 'select',
    '#title' => t('Disabilities'),
    '#options' => HealthDisabilities::listHealthDisabilities(),
    '#default_value' => $edit['disabilities'], 
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Next',
    '#attributes' => array('class' => 'btn')
  );
  
  $form['_current'] = array('#type' => 'value', '#value' => $hook);
  $form['_next'] = array('#type' => 'value', '#value' => 'finished');
  $form['_steps'] = array('#type' => 'value', '#value' => $steps_order);
  $form['_health_info'] = array('#type' => 'value', '#value' => $health_info);
  
  return $form;
}

function nurspri_school_admission_health_form_submit($form, &$form_state) {
  $next = $form_state['values']['_next'];
  $health_info = $form_state['values']['_health_info'];
  
  $health_info_table = 'health_info';
  $success = FALSE;
  
  if(!empty($health_info)) {
    // it's an edit
    $success = drupal_write_record($health_info_table, $health_info, 'id');
    if($success) {
      drupal_set_message('Update completed successfully');
      return;
    }
  }
  
  drupal_write_record($health_info_table, $form_state['values']);
  // also update student_application_tracker
  $tracker_data = array('email' => base64_decode($_GET['c']), 'step' => $next);
  drupal_write_record('student_application_tracker', $tracker_data, 'email');
  
  // update student_application
  $student_application['health_infoid'] = db_last_insert_id($health_info_table, 'id');
  drupal_write_record('student_application', $student_application, 'id');
  
  $success = TRUE;
  if($success) {
    drupal_goto('admission/apply', 'step=' . $next . '&c=' . $_GET['c']); 
  }
}

/**
 * Save or update health_info
 */
function nurspri_school_health_save() {
  
}

/**
 * @todo Implement examresults upload functionality and submit callback
 * 
 * @param type $form_state
 * @param type $profile
 * @param type $steps_order
 * @param type $hook
 * @return string 
 */
function nurspri_school_admission_examresults_form(&$form_state, $profile, $steps_order, $hook) {
  $form['#attributes'] = array('class' => 'form-horizontal');
  $form['examresults'] = array(
    '#type' => 'markup',
    '#value' => '<div style="background:#f6f6f2; padding:5px">Academic results</div>',
  );
  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('level', ''),
    //'#required' => TRUE,
  );
  $form['grade'] = array(
    '#type' => 'textfield',
    '#title' => t('Grade'),
    '#default_value' => variable_get('programme', ''), 
    //'#required' => TRUE,
  );
  $form['institution'] = array(
    '#type' => 'textfield',
    '#title' => t('Institution'),
    '#default_value' => variable_get('modeofentry', ''), 
    //'#required' => TRUE,
  );
  $form['qualification'] = array(
    '#type' => 'textfield',
    '#title' => t('Qualification'),
    '#default_value' => variable_get('matric_no', ''),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
    '#attributes' => array('class' => 'btn')
  );
  
  $form['_current'] = array('#type' => 'value', '#value' => $hook);
  $form['_next'] = array('#type' => 'value', '#value' => 'finished');
  $form['_steps'] = array('#type' => 'value', '#value' => $steps_order);
  
  return $form;
}

function nurspri_school_admission_examresults_form_submit($form, &$form_state) {
  $current = $form_state['values']['_current'];
  $steps = $form_state['values']['_steps'];
  $next = $form_state['values']['_next'];
  drupal_goto('admission/apply', 'step=' . $next);
  
  //return $form_state['redirect'] = 'admission/apply/examresults';
}

/**
 * Save or update examresults 
 */
function nurspri_school_examresults_save() {
  
}
/**
 * Implements hook_setup_tasks 
 *
 * @see acm_school_setup
 */
function nurspri_school_setup_tasks() {
	if($_GET['step'] == 'setup') {
		$step = 'add-teacher';
		$output = drupal_get_form('nurspri_school_setup_teacher_form');
		variable_set('setup_step', 'teacher');
	}
	if($_GET['step'] == 'class'){
		$step = 'add-class';
		$output = drupal_get_form('nurspri_school_setup_class_form');
		variable_set('setup_step', 'class');
	}
  return $output;
}
function nurspri_school_setup_teacher_form() {
	$form['#attributes'] = array('class' => 'form-horizontal');
	$form['name'] = array(
		'#type' => t('textfield'),
		'#title' => t('Name'),
		'#description' => t('Enter a teacher name'),
	);
	$form['description'] = array(
		'#type' => t('textfield'),
		'#title' => t('Description'),
		'#description' => t('Enter a description'),
	);
	$form['teacher_code'] = array(
		'#type' => t('textfield'),
		'#title' => t('Teacher code'),
		'#description' => t('Enter a code for this teacher'),
	);
	$form['email_subdomain'] = array(
		'#type' => t('textfield'),
		'#title' => t('Email subdomain'),
		'#description' => t('Enter an email subdomain for this teacher. E.g'),
	);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Save and continue',
		'#attributes' => array('class' => 'btn')
	);
  return $form;
}
function nurspri_school_setup_teacher_form_submit($form, &$form_state) {
	drupal_goto('setup', 'step=class'); // $steps['next'];
}

function nurspri_school_setup_class_form() {
	$form['#attributes'] = array('class' => 'form-horizontal');
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => 'Save and continue',
		'#attributes' => array('class' => 'btn')
	);
	return $form;
}

function nurspri_school_setup_class_form_submit($form, &$form_state) {
	drupal_goto('setup', 'step=finished');
}

/**
 * implements hook_admission_applications_list 
 * 
 * Implementation of a list of admission applications (report)
 */
function nurspri_school_admission_applications_list() {
  $admission_applications = views_get_view('nurspri_admission_applications');
  return $admission_applications;
}

/**
 * Loads the current user course_info object
 * 
 * User must have role Student
 * 
 * @param type $uid 
 */
function nurspri_school_admission_course_load($uid) {
  
}

/**
 * course_info(id) and uid are loaded from uri due to calls to
 * uni_school_course_load and acm_school_profile_load
 * 
 * @param type $course 
 */
function nurspri_school_admission_class_edit($uid) {
    $class_info = nurspri_school_admission_class_load($uid);
    return drupal_get_form('nurspri_school_admission_class_form', $class_info, NULL, NULL);
}

/**
 * Load course_info object from db
 *
 * @deprecated
 * @see uni_school_admission_course_load
 */
function nurspri_school_course_load($uid) {

}

/**
 * Implements hook_academic_level
 */
function nurspri_school_academic_level() {
    return drupal_map_assoc(array(100, 200, 300, 400, 500, 600, 700));
}

/**
 * Implements hook_student_course
 */
function nurspri_school_student_course() {

	drupal_set_title('Class');
	$studentCourses = views_get_view('student_class');
	$studentCourses->display = 'nurspri_school_student_class';

  return $studentCourses;
}

/**
 * Implements hook_score_settings
 *
 */
function nurspri_school_score_settings($type) {
  $settings['type'] = 'score';
  $settings['score']['score a student'] = array(
		'title' => 'Score a student',
		'callback url' => 'admin/settings/school/score/add'
	);
  if($type == 'add') {
    $settings['score']['score_form'] = drupal_get_form('nurspri_school_score_form');
  }

  return $settings;
}

function nurspri_school_score_form(&$form_state, $score = NULL, $edit = NULL) {

	$edit = (empty($form_state['values'])) ? (array)$score : $form_state['values'];
	//dsm($edit);
	if($edit) {
	//TODO: drupal js here to tell client-side that it's edit.
		drupal_add_js(array('score' => array('context' => 'score-form-edit')), 'setting');
		drupal_set_title('Edit Score');
	}else {
		drupal_set_title('Add Score');
	}
	$form['class_holder'] = array(
		'#tree' => TRUE,
		'#prefix' => '<div id="programme-wrapper">',
		'#suffix' => '</div>',
	);
	$form['#attributes'] = array('class' => 'form-horizontal');
	$subjects = isset($subject) ? Subject::listStudentsByRegisteredSubject($subjects) : array();

	$form['class_holder']['subject'] = array(
		'#type' => 'select',
		'#title' => t('Subject'),
		'#description' => t('Select the student subject'),
		'#options' => $subjects,
		'#default_value' => $edit['subject'],
		'#ahah' => array(
		  'path' => 'score/ahah/subject/callback',
		  'wrapper' => 'subject-wrapper',
		  'event' => 'change', // default value: does not need to be set explicitly.
		'#required' => TRUE
		)
	);

	$students = (isset($subject) || !empty($subject)) ? StudentSubject::listStudentsByRegisteredSubject($subject, 'uid') : array(955 => 'Kayode Odeyemi');

	// @todo Lookup profile table using student uids to retrieve matching
	// firstname and lastname.

	//uid
	$form['class_holder']['uid'] = array(
		'#type' => 'select',
		'#title' => t('Student'),
		'#description' => t('Select the student to score'),
		'#options' => $students,
		'#default_value' => $edit['uid'],
		'#required' => TRUE
	);
	$form['academicsession'] = array(
		'#type' => 'select',
		'#title' => t('Academic session'),
		'#description' => t('Select the academic session this score is for.'),
		'#options' => AcademicSession::listAcademicSession(),
		'#default_value' => $edit['academicsession'],
		'#required' => TRUE
	);
	$form['exam_score'] = array(
		'#type' => 'textfield',
		'#title' => t('Exam score'),
		'#description' => t('The actual score value'),
		'#default_value' => $edit['exam_score'],
	);
	// islocked
	$form['islocked'] = array(
		'#type' => 'checkbox',
		'#title' => t('Locked'),
		'#description' => t('Whether this score is locked from editing'),
		'#default_value' => $edit['islocked'],
	);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => isset($score) ? 'Update' : 'Save',
		'#attributes' => array('class' => 'btn'),
	);

	$form['_score'] = array('#type' => 'value', '#value' => $edit);
	$form['created'] = array('#type' => 'value', '#value' => time());
	if(isset($score)) {
		$form['state'] = array('#type' => 'value', '#value' => 'update');
		$form['updated'] = array('#type' => 'value', '#value' => time());
		$form['_loaded'] = array('#type' => 'value', '#value' => $score);
	}
	return $form;
}

function nurspri_school_score_form_validate($form, &$form_state) {

}

function nurspri_school_score_form_submit($form, &$form_state) {
  //dsm($form_state['values']);
	if (!empty($form_state['ahah_submission'])) {
	//dsm($form_state['values']);
	return;
	}
	// set testcount = 0
	$score = $form_state['values']['_score'];
	$score_table = 'score';
	$loaded = $form_state['values']['_loaded'];
	$op = $form_state['values']['op'];

	$success = FALSE;
	if($op == 'Update') {
	// it's an edit
	db_query("UPDATE {score} SET uid = %d, course = %d, islocked = %d, academicsession = '%s', score = %d, updated = %d WHERE id = %d", $form_state['values']['course_holder']['uid'],$form_state['values']['course_holder']['subject']  $form_state['values']['islocked'],  $form_state['values']['academicsession'], $form_state['values']['exam_score'],  $form_state['values']['updated'], $loaded['id']);

	$success = TRUE;
	if($success) {
	// TODO: grade update score
		$updated_score = array(
			'course' => $form_state['values']['course_holder']['subject'],
			'uid' => $form_state['values']['course_holder']['uid'],
			'islocked' => $form_state['values']['islocked'],
			'academicsession' => $form_state['values']['academicsession'],
			'exam_score' => $form_state['values']['exam_score'],
			'submittedby' => ''
		);
	// module_invoke('acm_school', 'grade_update_score', $form_state['values']);
	drupal_set_message('Update completed successfully');
	return;
	}
	drupal_set_message('An error occurred while updating Score');
	return FALSE;
	}

	if($op == 'Save') {
	//drupal_write_record($score_table, $form_state['values']);
		db_query("INSERT INTO {score} (uid, course, islocked, academicsession, score, created) VALUES (%d, %d, %d, %s, %d, %d)", $form_state['values']['course_holder']['uid'],  $form_state['values']['course_holder']['subject'], $form_state['values']['islocked'], 
		$form_state['values']['academicsession'], $form_state['values']['exam_score'],$form_state['values']['created']);  

	$success = TRUE;
	if($success) {
		// TODO Invoke hook to grade new Score
		$new_score = array(

		'course' => $form_state['values']['course_holder']['subject'],
		'uid' => $form_state['values']['course_holder']['uid'],
		'islocked' => $form_state['values']['islocked'],
		'academicsession' => $form_state['values']['academicsession'],
		'exam_score' => $form_state['values']['exam_score'],
		'submittedby' => 0
	);
	// grade_new_score
	drupal_set_message('Score created successfully');
    }
  }
}

/**
 * Implementation of hook_views_api(), register view API information so include files can be loaded
 */
function nurspri_school_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'nurspri_school') . '/views',
  );
}

