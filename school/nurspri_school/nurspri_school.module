<?php 
/*
 * Implements hook_menu
 */
function nurspri_school_menu() {
  $items = array();
  // menu is only available if this module is enabled
  $items['admission/apply/course'] = array(
    'title' => t('Application to [School name]'),
    'description' => t('Student application for admission to a school'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nurspri_school_admission_course_form'),
    'access arguments' => array(''), // edit admission form 
    'access callback' => TRUE 
  );
  $items['admission/apply/sponsor'] = array(
    'title' => t('Application to [School name]'),
    'description' => t('Student application for admission to a school'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nurspri_school_admission_sponsors_form'), // function callback
    'access arguments' => array(''), // edit admission form 
    'access callback' => TRUE // remove if access arguments is set
  );
  $items['admission/apply/nextofkin'] = array(
    'title' => t('Application to [School name]'),
    'description' => t('Student application for admission to a school'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nurspri_school_admission_nextofkin_form'), // function callback
    'access arguments' => array(''), // edit admission form
    'access callback' => TRUE // remove if access arguments is set
  ); 
  $items['admission/apply/health'] = array(
    'title' => t('Application to [School name]'),
    'description' => t('Student application for admission to a school'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nurspri_school_admission_health_form'), // function callback
    'access arguments' => array(''), // edit admission form
    'access callback' => TRUE // remove if access arguments is set
  );
  $items['admission/apply/examresults'] = array(
    'title' => t('Application to [School name]'),
    'description' => t('Student application for admission to a school'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nurspri_school_admission_examresults_form'), // function callback
    'access arguments' => array(''), // edit admission form
    'access callback' => TRUE // remove if access arguments is set
  ); 
 
  return $items;
}
/**
 * Implements hook_acm_roles 
 * 
 * Defines default roles needed in a nursery for school module
 */
function nurspri_school_acm_roles(){
  return array ();
  //return array('Role1', 'Role2');
}
/**
 * Implements hook_acm_roles_perm
 * 
 * Assigns permission(s) to role(s) 
 */
function nurspri_school_acm_roles_perm(){
  return array ();
  //return array('Staff' => 'setup school','Student' => 'register course');
}
/**
 * Implements hook_school_setting 
 */
function nurspri_school_school_settings() {
  $settings['type'] = 'configure';
  // General configuration
  $settings['configure']['admission'] = array(
    'title' => t('Set admission status'),
    'callback url' => t('admin/settings/school/admission/status')
  );
  $settings['configure']['users'] = array(
    'title' => 'Configure users',
    'callback url' => 'admin/settings/school/users'
  );
  $settings['configure']['fees'] = array(
    'title' => 'Setup Fees',
    'callback url' => 'admin/settings/school/fees'
  );
 
  return $settings;
}
/**
 * Implements hook_admission_settings 
 */
function nurspri_school_admission_settings($type) {
  $settings['type'] = 'admission';
  $settings['admission']['configure'] = array(
    'title' => 'Configure',
    'callback url' => 'admin/settings/school/'
  );
  $settings['admission']['view applications'] = array(
    'title' => 'View applications',
    'callback url' => 'admission/applications'
  );
  if($type == 'status') {
    $settings['admission']['admission_status_form'] = drupal_get_form('nurspri_school_admission_settings_form');
  }
  return $settings;
}
function nurspri_school_admission_settings_form(&$form_state) {
  $form['#attributes'] = array('class' => 'form-horizontal');
  $form['admission_status'] = array(
    '#type' => 'select',
    '#title' => t('Admission status'),
    '#default_value' => variable_get('admission_status', ''),
    '#options' => array('Open', 'Closed'),
    '#description' => t('Admission status'),
  );
  $form['academic_session'] = array(
    '#type' => 'textfield',
    '#title' => t('Academic session'),
    '#default_value' => variable_get('academic_session', ''),
    '#description' => t('Set the current academic session')
);
  $form['#submit'][] = 'nurspri_school_admission_settings_form_submit';
  return system_settings_form($form);
}

function nurspri_school_admission_settings_form_submit($form, &$form_state) {
  $session = $form_state['values']['academic_session'];
  AcademicSession::addAcademicSession($session);
 
}
/**
 * implements hook_term_type
 */
function nurspri_school_term_type() {
return array();
}
/**
 * Implements hook_department_settings 
 */
function nurspri_school_department_settings($type) {
 
}
function nurspri_school_student_application_table_info() {
  $table['course_info'] = array(
    'primary key' => 'id'
  );
  return $table;
}

/**
 * Implements hook_grade_settings 
 */
function nurspri_school_grade_settings($type){
  $settings['type'] = 'grade';
  $settings['grade']['configure'] = array(
    'title' => t('Configure grading system'),
    'callback url' => 'admin/settings/school/grade/gradingsystem'
  );
  // set global grading point
  $settings['grade']['grade point'] = array(
    'title' => 'Set grade point',
    'callback url' => 'admin/settings/school/grade/gradepoint'
  );
  // set grading point for a specific department
  // a staff in medicine department should be able to contact the IT
  // staff (Acadaman authorized user) to set medicine department
  // grade point to 7
 
  $settings['grade']['grade a student'] = array(
    'title' => 'Grade a student',
    'callback url' => 'admin/settings/school/grade/add'
  );
  $settings['grade']['score a student'] = array(
    'title' => 'Score a student',
    'callback url' => 'admin/settings/school/score/add'
  );
  if($type == 'gradingsystem') {
    $settings['grade']['gradingsystem_form'] = drupal_get_form('nurspri_school_gradingsystem_settings_form'); //uni_school_gradingsystem_settings_form();
  }
  if($type == 'gradepoint') {
    $settings['grade']['gradepoint_form'] = drupal_get_form('nurspri_school_gradepoint_settings_form'); //uni_school_gradepoint_settings_form();
  }
  
  if($type == 'add') {
    $settings['grade']['grade_form'] = drupal_get_form('nurspri_school_grade_form');
  }
  
  return $settings;
}

function nurspri_school_gradingsystem_settings_form(&$form_state) {
  $form['#attributes'] = array('class' => 'form-horizontal');
  $form['grade_system'] = array(
    '#type' => 'select',
    '#title' => t('Grade system'),
    '#options' => drupal_map_assoc(array('None', 'Local country', 'WES')),
    '#default_value' => variable_get('grade_system_type', ''),
    '#ahah' => array(
      'path' => 'grade/ahah/grade-system/callback',
      'wrapper' => 'grade-system-wrapper',
      'effect' => 'fade'
    ),
    '#required' => TRUE
  );
  
  $form['grade_system_holder'] = array(
    '#tree' => TRUE,
    '#title' => t(''),
    '#type' => 'fieldset',
    '#prefix' => '<div id="grade-system-wrapper">',
    '#suffix' => '</div>',
  );

  // @todo If type is Local country
  // Add a field to select country.
  // variable_get('country_grade_system', '')
  if($edit['grading_system'] == 'Local country') {
    $form['grade_system_holder']['country_grade_system'] = array(
      '#type' => 'select',
      '#title' => t('Country'),
      '#description' => t('Select a country'),
      '#options' => array('ng'),
      '#default_value' => variable_get('country_grade_system', '')
    );
  }

  // TODO: Block default POST in submit.
  return system_settings_form($form);
}

/**
 * Implements hook_grade_local_country
 *
 * Grade point system by local country as seen here: http://en.wikipedia.org/wiki/Grading_systems_by_country
 */
function nurspri_school_grade_local_country($country_code) {

}

/**
 * Implements hook_grade_ects
 *
 * Grade point system by ECTS http://en.wikipedia.org/wiki/ECTS_grading_scale
 */
function nurspri_school_grade_ects() {

}

/**
 * Implements hook_grade_wes
 *
 * Grade point system by WES as seen at http://wenr.wes.org/2011/08/wenr-julyaugust-2011-practical-information/
 */
function nurspri_school_grade_wes() {

}

/**
 * Computes student's current GPA. Computes student's GPA
 * for the current semester/session
 */
function uni_school_compute_current_gpa($uid, $latest_score) {
  // get the current grade system and switch on that.
  // get current semester or session.
  // get the courses taken by the student in that semester.
  // get the courses credit point.
  // get the grade gotten on each course by student. course => grade
  // get the gpe on each grade.
  // calculate and return gpa 
}

/**
 * Computes student's cumulative GPA
 */
function nurspri_school_compute_cumulative_gpa($uid) {

}

function nurspri_school_gradepoint_settings_form() {
  $form['#attributes'] = array('class' => 'form-horizontal');
  $form['gradepoint'] = array(
    '#type' => 'select',
    '#title' => t('Set grade point'),
    '#options' => array(4, 5, 7),
    '#default_value' => variable_get('gradepoint', '')
  );
  return system_settings_form($form);
}

function nurspri_school_dept_gradepoint_settings_form() {
  $form['#attributes'] = array('class' => 'form-horizontal');
  $form['gradepoint_depts'] = array(
    '#type' => 'select', // multiple
    '#title' => t('Department'),
    '#options' => array(),
    '#default_value' => variable_get('gradepoint_depts', array())
  );
  $form['dept_gradepoint'] = array(
    '#type' => 'select',
    '#title' => t('Set grade point'),
    '#options' => array(4,5,7),
    '#default_value' => variable_get('dept_gradepoint', '')
  );
  return system_settings_form($form);
}

function nurspri_school_grade_form(&$form_state, $grade = NULL, $edit = NULL ) {

  $edit = (empty($form_state['values']))? $grade : $form_state['values'];

  if($edit) {
    drupal_set_title('Edit Grade');
  }else {
    drupal_set_title('Add Grade');
  }

  $form['#attributes'] = array('class' => 'form-horizontal');

  $students = acm_school_get_users_in_a_role(29);

  // student uid
  $form['uid'] = array(
    '#type' => 'select',
    '#title' => t('Student'),
    '#description' => t('Select student to grade'),
    '#options' => $students,
    '#default_value' => $edit['uid'],
    '#required' => TRUE
  );

  // automatically populated when student uid is selected
  $form['course'] = array(
    '#type' => 'select',
    '#title' => t('Course'),
    '#description' => t('Student course'),
    '#options' => array(),
    '#default_value' => $edit['course'],
    '#required' => TRUE 
  );
  $form['grade'] = array(
    '#type' => 'textfield',
    '#title' => t('Grade'),
    '#description' => t('Grade representation of a score based on Grading system'),
    '#default_Value' => $edit['grade']
  );

  $form['gradepoint'] = array(
    '#type' => 'textfield',
    '#title' => t('Grade point'),
    '#description' => t('The applicable grade point to a particular score. For example, a score(total score) of 60 might have a grade point of 3 or 3.3 if the applicable grade is B+'),
    '#default_value' => $edit['gradepoint']
  );
  /**
   * average test score
   * gotten from score table based on the uid
   */ 
  $form['test_score_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Test score'),
    '#description' => t('Average test score for this student grade'),
    '#default_value' => $edit['test_score_id']
  );

  $form['exam_score_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Exam score'),
    '#description' => t('Student exam score'),
    '#default_value' => $edit['exam_score_id'],
    '#required' => TRUE 
  );

  $form['totalscore'] = array(
    '#type' => 'textfield',
    '#title' => t('Total score'),
    '#description' => t('Total score (testscores + exam score)'),
    '#default_value' => $edit['totalscore']
  );

  $form['submittedby'] = array(
    '#type' => 'select',
    '#title' => t('Submitted by'),
    '#description' => t('Select the lecturer who submitted the grade'),
    '#default_value' => $edit['submittedby'],
    '#options' => array(),
    '#required' => TRUE
  );

  $form['submitted'] = array(
    '#type' => 'checkbox',
    '#title' => t('Submitted for approval?'),
    '#description' => t('Whether this grade is submitted for approval or not'),
    '#default_value' => $edit['submitted'],
    '#required' => TRUE
  );
  $form['approved'] = array(
    '#type' => 'checkbox',
    '#title' => t('Is grade approved?'),
    '#description' => t('Whether this grade has been approved or not'),
    '#default_value' => $edit['approved']
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => isset($score) ? 'Update' : 'Save',
    '#attributes' => array('class' => 'btn'),
  );
  $form['_grade'] = array('#type' => 'value', '#value' => $edit);
  $form['created'] = array('#type' => 'value', '#value' => time());
  if(isset($grade)) {
      $form['state'] = array('#type' => 'value', '#value' => 'update');
      $form['updated'] = array('#type' => 'value', '#value' => time());
      $form['_loaded'] = array('#type' => 'value', '#value' => $grade);
  }

  return $form;
}

function nurspri_school_grade_form_validate($form, &$form_state) {

}

function nurspri_school_grade_form_submit($form, &$form_state) {

}
/**
 * @deprecated
 * @return type 
 */
function uni_school_grade_settings_form() {
  if($type == 'gradingsystem') {
    
    return nurspri_school_gradingsystem_settings_form();
  }
}

/**
 * Implements hook_fees_type 
 */
function nurspri_school_fees_type() {
  return array();
}
/**
 * implements hook_faculty 
 */
function nurspri_school_faculty() {
 
}

/**
 * implements hook_department 
 */
function nurspri_school_department() {
  
}

/**
 * Implements hook_grade 
 */
function nurspri_school_grade() {
  $grade_view = views_get_view('uni_grade_view');
  return $grade_view;
}
/**
 * Implements hook_fees 
 */
function nurspri_school_fees() {
  
}
/**
 * Implements hook_admission 
 * 
 * Landing page of Admission
 */
function nurspri_school_admission() {
  $admission_view = views_get_view('uni_admission_view');
  return $admission_view;
}
/**
 * Implements hook_fees_catalog 
 */
function nurspri_school_fees_catalog_info() {
  return array();
}

/**
 * Implements hook_acm_student_application 
 */
function nurspri_school_acm_student_application() {
  global $user;
  // profile = StudentProfile::getStudentProfile($user);
  // courseinfo = CourseInfo::getCourseInfo($user);
  // student_sponsorinfo = SponsorsInfo::getSponsors($user);
  // student_nextofkininfo = NextOfKinInfo::getNextOfKinInfo($user);
  // student_healthinfo = HealthInfo::getHealthInfo($user);
  // student_results = ExaminationResult::getResults($user);
  // studentApplication = new StudentApplication($user);
    
  switch($_GET['edit']) {
  case 'app':
      // $student_application object for the current student
      $profile = acm_school_profile_load($user->uid);
      //  drupal_get_form('uni_school_admission_course_form', $profile);
      return drupal_get_form('acm_school_student_profile_form', (array)$profile->profile, NULL);
  }

  switch($_GET['app']) {
  case 'sponsor':
      drupal_set_title('Sponsor');
      $studentApplication = views_get_view('uni_student_application_view');
      $studentApplication->display = 'sponsor';
      break;
    case 'course':
      drupal_set_title('Course');
        $studentApplication = views_get_view('uni_student_application_view');
        $studentApplication->display = 'course';
        break;
    case 'nextofkin':
      drupal_set_title('Next of Kin');
        $studentApplication = views_get_view('uni_student_application_view');
        $studentApplication->display = 'nextofkin';
        break;
    default:
        $studentApplication = views_get_view('uni_student_application_view');
        $studentApplication->display = 'default';
        break;
  }
  // alternatively, just say, 
  //$studentApplication = views_get_view('uni_student_application_view'); // take the view to display through its own hook // view for uni student application
  //$studentApplication->display = 'default';
  
  return $studentApplication;
}

/**
 * Implements hook_student_application_items
 */
function nurspri_school_student_application_items() {
  $items = array();
  $items['sponsor'] = array(
    'data' => l('Sponsor Information', 'application/sponsor')
  );
  $items['course'] = array(
    'data' => l('Course Information', 'application/course')
);
  return $items;

}


/**
 * Proposal: A proposal to replace acm_school_admission_application_callback
 * 
 * This hook defines the structure of admission application steps that 
 * can be implemented per school type. At the end of every application step,
 * this hook is looked up to determine what application form is next
 * 
 * @example 
 */
function nurspri_school_admission_application_info() {
  $application_form = array(
   
    'course' => array(
      'title' => 'course',
      'form_id' => 'nurspri_school_admission_course_form'
    ),
    'sponsor' => array(
      'title' => 'sponsor',
      'form_id' => 'nurspri_school_admission_sponsors_form'
    ),
    'nextofkin' => array(
      'title' => 'nextofkin',
      'form_id' => 'nurspri_school_admission_nextofkin_form'
    ),
    'health' => array(
      'title' => 'health',
      'form_id' => 'nurspri_school_admission_health_form'
    ),
  );
  return $application_form;
}

/**
 * Implements hook_admission_form_id
 * @return string 
 */
function nurspri_school_admission_form_id() {
  return 'nurspri_school_admission_form';
}

//function nurspri_school_admission_course_edit($course_info) {
  //$course_info->course['state'] = 'edit';
  //return uni_school_admission_course_form($profile->profile);
  //return drupal_get_form('uni_school_admission_course_form', $course_info, NULL, NULL);
//}

function nurspri_school_admission_course_form(&$form_state, $course_info, $steps_order, $hook) {
  $edit = (empty($form_state['values'])) ? (array)$course_info : $form_state['values'];
  
  $form['#attributes'] = array('class' => 'form-horizontal');
  $form['course_info'] = array(
    '#type' => 'markup',
    '#value' => '<div style="background:#f6f6f2; padding:5px">Course Information</div>',
  );
  $form['level'] = array(
    '#type' => 'select',
    '#title' => t('Academic level'),
    '#default_value' => $edit['level'],
    '#required' => TRUE,
    '#options' => array('100', '200', '300', '400', '500'), // get values from StudentLevel class
  );
  
  $form['modeofentry'] = array(
    '#type' => 'select',
    '#title' => t('Mode of entry'),
    '#options' => array('UME', 'DE'), // get values from Admission class
    '#default_value' => $edit['modeofentry'], 
    '#required' => TRUE,
  );
  $form['yearofentry'] = array(
    '#type' => 'select',
    '#title' => t('Year of entry'),
    '#options' => array('2013', '2012'), // display 10 years + the current year
    '#default_value' => $edit['yearofentry'],
    '#required' => TRUE,
  );
  $form['registeredsession'] = array(
    '#type' => 'select',
    '#title' => t('Academic session'),
    '#default_value' => $edit['registeredsession'], // the current academic session
    '#options' => AcademicSession::listAcademicSession(),
    '#description' => t('The academic session you are registering for'),
    '#required' => TRUE,
  );
 
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save and continue',
    '#attributes' => array('class' => 'btn')
  );
  
  $form['_current'] = array('#type' => 'value', '#value' => $hook);
  $form['_next'] = array('#type' => 'value', '#value' => 'sponsor');
  $form['_steps'] = array('#type' => 'value', '#value' => $steps_order);
  $form['_course_info'] = array('#type' => 'value', '#value' => $course_info);
  
  return $form;
}

function nurspri_school_admission_course_form_submit($form, &$form_state) {
  $current = $form_state['values']['_current'];
  $next = $form_state['values']['_next'];
  $course_info = $form_state['values']['_course_info'];
  
  $course_info_table = 'course_info';
  $tracker = db_result(db_query("SELECT step FROM {student_application_tracker} WHERE email = '%s'", $email));
  $success = FALSE;
  
  if(!empty($course_info)) {
    // it's an edit
    $success = drupal_write_record($course_info_table, $course_info, 'id');
    if($success) {
      drupal_set_message('Update completed successfully');
      return;
    }
  }
  
  drupal_write_record($course_info_table, $form_state['values']);
  // also update student_application_tracker
  $tracker_data = array('email' => base64_decode($_GET['c']), 'step' => $next);
  drupal_write_record('student_application_tracker', $tracker_data, 'email');
  
  $success = TRUE;
  if($success) {
    drupal_goto('admission/apply', 'step=' . $next . '&c=' . $_GET['c']); 
  }
}

/**
 * Saves or update course_info 
 */
function nurspri_school_course_info_save() {
  
}

/**
 * Menu callback for admission/apply/sponsor
 * @return string 
 */
function nurspri_school_admission_sponsors_form(&$form_state, $sponsors_info, $steps_order, $hook) {
  $edit = (empty($form_state['values'])) ? (array)$sponsors_info : $form_state['values'];
  
  $form['#attributes'] = array('class' => 'form-horizontal');
  $form['sponsors'] = array(
    '#type' => 'markup',
    '#value' => '<div style="background:#f6f6f2; padding:5px">Sponsors Information</div>',
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Full names'),
    '#default_value' => $edit['name'],
    '#required' => TRUE,
  );
  $form['address1'] = array(
    '#type' => 'textfield',
    '#title' => t('Address1'),
    '#default_value' => $edit['address1'],
    '#required' => TRUE,
  );
  $form['address2'] = array(
    '#type' => 'textfield',
    '#title' => t('Address2'),
    '#default_value' => $edit['address2'],
  );
  $form['nationality'] = array(
    '#type' => 'select',
    '#title' => t('Nationality'),
    '#options' => array(0 => 'Nigeria', 1 => 'Togo'),
    '#default_value' => $edit['nationality'],
    '#required' => TRUE,
  );
 
  $form['state'] = array(
    '#type' => 'select',
    '#title' => t('State'),
    '#options' => array(0 => 'Other'),
    '#default_value' => $edit['state'],
    '#required' => TRUE,
  );
  $form['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#default_value' => $edit['phone'],
  );
  $form['mobile'] = array(
    '#type' => 'textfield',
    '#title' => t('Mobile'),
    '#default_value' => $edit['mobile'],
    '#required' => TRUE
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Next',
    '#attributes' => array('class' => 'btn')
  );
  
  $form['_current'] = array('#type' => 'value', '#value' => $hook);
  $form['_next'] = array('#type' => 'value', '#value' => 'nextofkin');
  $form['_steps'] = array('#type' => 'value', '#value' => $steps_order);
  $form['_sponsors_info'] = array('#type' => 'value', '#value' => $sponsors_info);
  
  return $form;
}

function nurspri_school_admission_sponsors_form_submit($form, &$form_state) {
  
  $current = $form_state['values']['_current'];
  $next = $form_state['values']['_next'];
  $sponsors_info = $form_state['values']['_sponsors_info'];
  
  $sponsors_info_table = 'sponsors_info';
  $success = FALSE;
  
  if(!empty($sponsors_info)) {
    // it's an edit
    $success = drupal_write_record($sponsors_info_table, $sponsors_info, 'id');
    if($success) {
      drupal_set_message('Update completed successfully');
      return;
    }
  }
  
  drupal_write_record($sponsors_info_table, $form_state['values']);
  // also update student_application_tracker
  $tracker_data = array('email' => base64_decode($_GET['c']), 'step' => $next);
  drupal_write_record('student_application_tracker', $tracker_data, 'email');  
  
  // update student_application
  $student_application['sponsors_infoid'] = db_last_insert_id($sponsors_info_table, 'id');
  drupal_write_record('student_application', $student_application, 'id');
  
  $success = TRUE;
  if($success) {
    drupal_goto('admission/apply', 'step=' . $next . '&c=' . $_GET['c']); 
  }
}

/**
 * Save or update sponsors_info 
 */
function nurspri_school_sponsors_save() {
  
}

function nurspri_school_admission_nextofkin_form(&$form_state, $nextofkin_info, $steps_order, $hook) {
  $edit = (empty($form_state['values'])) ? (array)$nextofkin_info : $form_state['values'];
  
  // register previous form as sponsors (this is kind of optional)
  $form['#attributes'] = array('class' => 'form-horizontal');
  $form['nextofkin'] = array(
    '#type' => 'markup',
    '#value' => '<div style="background:#f6f6f2; padding:5px">Next of kin Information</div>',
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Full names'),
    '#default_value' => $edit['name'],
    '#required' => TRUE,
  );
  $form['address1'] = array(
    '#type' => 'textfield',
    '#title' => t('Address1'),
    '#default_value' => $edit['address1'],
    '#required' => TRUE,
  );
  $form['address2'] = array(
    '#type' => 'textfield',
    '#title' => t('Address2'),
    '#default_value' => variable_get('address2', ''),
  );
  $form['relationship'] = array(
    '#type' => 'select',
    '#title' => t('Relationship'),
    '#options' => NextOfKinRelationship::listNextOfKinRelationship(),
    '#default_value' => $edit['relationship'],
    '#required' => TRUE,
  );
  $form['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#default_value' => $edit['phone'],
  );
  $form['mobile'] = array(
    '#type' => 'textfield',
    '#title' => t('Mobile'),
    '#default_value' => $edit['mobile'],
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Next',
    '#attributes' => array('class' => 'btn')
  );
  
  $form['_current'] = array('#type' => 'value', '#value' => $hook);
  $form['_next'] = array('#type' => 'value', '#value' => 'health');
  $form['_steps'] = array('#type' => 'value', '#value' => $steps_order);
  $form['_nextofkin_info'] = array('#type' => 'value', '#value' => $nextofkin_info);
  
  return $form;
}

function nurspri_school_admission_nextofkin_form_submit($form, &$form_state) {
  
  $next = $form_state['values']['_next'];
  $nextfkin_info = $form_state['values']['_nextofkin_info'];
  
  $nextofkin_info_table = 'next_of_kin_info';
  $success = FALSE;
  
  if(!empty($nextfkin_info)) {
    // it's an edit
    $success = drupal_write_record($nextofkin_info_table, $nextfkin_info, 'id');
    if($success) {
      drupal_set_message('Update completed successfully');
      return;
    }
  }
  
  drupal_write_record($nextofkin_info_table, $form_state['values']);
  // also update student_application_tracker
  $tracker_data = array('email' => base64_decode($_GET['c']), 'step' => $next);
  drupal_write_record('student_application_tracker', $tracker_data, 'email');
  
  // update student_application
  $student_application['next_of_kin_infoid'] = db_last_insert_id($nextofkin_info_table, 'id');
  drupal_write_record('student_application', $student_application, 'id');
  
  $success = TRUE;
  if($success) {
    drupal_goto('admission/apply', 'step=' . $next . '&c=' . $_GET['c']); 
  }
}

/**
 * Save or update nextofkin_info 
 */
function uni_school_nextofkin_save() {
  
}

function nurspri_school_admission_health_form(&$form_state, $health_info, $steps_order, $hook) {
  $form['#attributes'] = array('class' => 'form-horizontal');
  $form['sponsors'] = array(
    '#type' => 'markup',
    '#value' => '<div style="background:#f6f6f2; padding:5px">Health Information</div>',
  );
  $form['status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#options' => HealthStatus::listHealthStatus(),
    '#default_value' => $edit['health'], 
    '#required' => TRUE,
  );
  $form['disabilities'] = array(
    '#type' => 'select',
    '#title' => t('Disabilities'),
    '#options' => HealthDisabilities::listHealthDisabilities(),
    '#default_value' => $edit['disabilities'], 
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Next',
    '#attributes' => array('class' => 'btn')
  );
  
  $form['_current'] = array('#type' => 'value', '#value' => $hook);
  $form['_next'] = array('#type' => 'value', '#value' => 'finished');
  $form['_steps'] = array('#type' => 'value', '#value' => $steps_order);
  $form['_health_info'] = array('#type' => 'value', '#value' => $health_info);
  
  return $form;
}

function nurspri_school_admission_health_form_submit($form, &$form_state) {
  $next = $form_state['values']['_next'];
  $health_info = $form_state['values']['_health_info'];
  
  $health_info_table = 'health_info';
  $success = FALSE;
  
  if(!empty($health_info)) {
    // it's an edit
    $success = drupal_write_record($health_info_table, $health_info, 'id');
    if($success) {
      drupal_set_message('Update completed successfully');
      return;
    }
  }
  
  drupal_write_record($health_info_table, $form_state['values']);
  // also update student_application_tracker
  $tracker_data = array('email' => base64_decode($_GET['c']), 'step' => $next);
  drupal_write_record('student_application_tracker', $tracker_data, 'email');
  
  // update student_application
  $student_application['health_infoid'] = db_last_insert_id($health_info_table, 'id');
  drupal_write_record('student_application', $student_application, 'id');
  
  $success = TRUE;
  if($success) {
    drupal_goto('admission/apply', 'step=' . $next . '&c=' . $_GET['c']); 
  }
}

/**
 * Save or update health_info
 */
function nurspri_school_health_save() {
  
}

/**
 * @todo Implement examresults upload functionality and submit callback
 * 
 * @param type $form_state
 * @param type $profile
 * @param type $steps_order
 * @param type $hook
 * @return string 
 */
function nurspri_school_admission_examresults_form(&$form_state, $profile, $steps_order, $hook) {
  $form['#attributes'] = array('class' => 'form-horizontal');
  $form['examresults'] = array(
    '#type' => 'markup',
    '#value' => '<div style="background:#f6f6f2; padding:5px">Academic results</div>',
  );
  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => variable_get('level', ''),
    //'#required' => TRUE,
  );
  $form['grade'] = array(
    '#type' => 'textfield',
    '#title' => t('Grade'),
    '#default_value' => variable_get('programme', ''), 
    //'#required' => TRUE,
  );
  $form['institution'] = array(
    '#type' => 'textfield',
    '#title' => t('Institution'),
    '#default_value' => variable_get('modeofentry', ''), 
    //'#required' => TRUE,
  );
  $form['qualification'] = array(
    '#type' => 'textfield',
    '#title' => t('Qualification'),
    '#default_value' => variable_get('matric_no', ''),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
    '#attributes' => array('class' => 'btn')
  );
  
  $form['_current'] = array('#type' => 'value', '#value' => $hook);
  $form['_next'] = array('#type' => 'value', '#value' => 'finished');
  $form['_steps'] = array('#type' => 'value', '#value' => $steps_order);
  
  return $form;
}

function nurspri_school_admission_examresults_form_submit($form, &$form_state) {
  $current = $form_state['values']['_current'];
  $steps = $form_state['values']['_steps'];
  $next = $form_state['values']['_next'];
  drupal_goto('admission/apply', 'step=' . $next);
  
  //return $form_state['redirect'] = 'admission/apply/examresults';
}

/**
 * Save or update examresults 
 */
function nurspri_school_examresults_save() {
  
}
/**
 * Implements hook_setup_tasks 
 *
 * @see acm_school_setup
 */
function nurspri_school_setup_tasks() {
  // invoke steps_list here so we can pass on the next step

  //return $output;
}
function nurspri_school_setup_course_form() {
  $form['#attributes'] = array('class' => 'form-horizontal');
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save and continue',
    '#attributes' => array('class' => 'btn')
  );
  return $form;
}

function nurspri_school_setup_course_form_submit($form, &$form_state) {
  
  drupal_goto('setup', 'step=finished');
}

/**
 * implements hook_admission_applications_list 
 * 
 * Implementation of a list of admission applications (report)
 */
function nurspri_school_admission_applications_list() {
  $admission_applications = views_get_view('nurspri_admission_applications');
  return $admission_applications;
}

/**
 * Loads the current user course_info object
 * 
 * User must have role Student
 * 
 * @param type $uid 
 */
function nurspri_school_admission_course_load($uid) {
  
}

/**
 * course_info(id) and uid are loaded from uri due to calls to
 * uni_school_course_load and acm_school_profile_load
 * 
 * @param type $course 
 */
function nurspri_school_admission_course_edit($uid) {
    // load the course_info object by calling uni_school_course_load
    $course_info = nurspri_school_admission_course_load($uid);
    return drupal_get_form('nurspri_school_admission_course_form', $course_info, NULL, NULL); 
}

/**
 * Load course_info object from db
 *
 * @deprecated
 * @see uni_school_admission_course_load
 */
function nurspri_school_course_load($uid) {

}

/**
 * Implements hook_academic_level
 */
function nurspri_school_academic_level() {
    return drupal_map_assoc(array(100, 200, 300, 400, 500, 600, 700));
}

/**
 * Implements hook_student_course
 */
function nurspri_school_student_course() {

  drupal_set_title('Course');
  $studentCourses = views_get_view('student_course');
  $studentCourses->display = 'nurspri_school_student_course';

  return $studentCourses;
}

/**
 * Implements hook_score_settings
 *
 */
function nurspri_school_score_settings($type) {
  $settings['type'] = 'score';
  
  if($type == 'add') {
    $settings['score']['score_form'] = drupal_get_form('nurspri_school_score_form');
  }

  return $settings;
}

function nurspri_school_score_form(&$form_state, $score = NULL, $edit = NULL) {

  $edit = (empty($form_state['values'])) ? (array)$score : $form_state['values'];
  //dsm($edit);
  if($edit) {
    //TODO: drupal js here to tell client-side that it's edit.
    drupal_add_js(array('score' => array('context' => 'score-form-edit')), 'setting');
    drupal_set_title('Edit Score');
  }else {
    drupal_set_title('Add Score');
  }

  $form['#attributes'] = array('class' => 'form-horizontal');
  //$programme = $edit['programme'];
  $programme = isset($form_state['values']['programme']) ? $form_state['values']['programme'] : NULL;
  
  // programme
  $form['programme'] = array(
    '#type' => 'select',
    '#title' => t('Programme'),
    '#description' => t('Select the student programme'),
    '#options' => Programme::listProgrammes(array('id','name'), 'id'),
    '#default_value' => $edit['programme'],
    '#ahah' => array(
      'path' => 'score/ahah/programme/callback',
      'wrapper' => 'programme-wrapper',
      'event' => 'change', // default value: does not need to be set explicitly.
    ),
    '#required' => TRUE
  );
  $form['programme_holder'] = array(
    '#tree' => TRUE,
    '#prefix' => '<div id="programme-wrapper">',
    '#suffix' => '</div>',
  );

  $courses = isset($programme) ? Course::getCoursesByProgramme($programme) : array();

  // course
  // a list of courses registered by the student
  $form['programme_holder']['course'] = array(
    '#type' => 'select',
    '#title' => t('Course'),
    '#description' => t('Select the student course'),
    '#options' => $courses,
    '#default_value' => $edit['course'],
    '#ahah' => array(
      'path' => 'score/ahah/course/callback',
      'wrapper' => 'course-wrapper',
      'event' => 'change', // default value: does not need to be set explicitly.
    '#required' => TRUE
    )
  );
  $form['course_holder'] = array(
    '#tree' => TRUE,
    '#prefix' => '<div id="course-wrapper">',
    '#suffix' => '</div>',
  );

  $course = isset($edit['course']) ? $edit['course'] : NULL;

  $students = (isset($course) || !empty($course)) ? StudentCourse::listStudentsByRegisteredCourse($course, 'uid') : array(955 => 'Kayode Odeyemi');

  // @todo Lookup profile table using student uids to retrieve matching
  // firstname and lastname.

  //uid
  $form['course_holder']['uid'] = array(
    '#type' => 'select',
    '#title' => t('Student'),
    '#description' => t('Select the student to score'),
    '#options' => $students,
    '#default_value' => $edit['uid'],
    '#required' => TRUE
  );
  // academicsession
  $form['academicsession'] = array(
    '#type' => 'select',
    '#title' => t('Academic session'),
    '#description' => t('Select the academic session this score is for.'),
    '#options' => AcademicSession::listAcademicSession(),
    '#default_value' => $edit['academicsession'],
    '#required' => TRUE
  
  );
  $form['exam_score'] = array(
    '#type' => 'textfield',
    '#title' => t('Exam score'),
    '#description' => t('The actual score value'),
    '#default_value' => $edit['exam_score'],
  );
  // overall
  $form['overall'] = array(
    '#type' => 'select',
    '#title' => t('Overall'),
    '#description' => t('Score total or overall'),
    '#default_value' => $edit['overall'],
    '#options' => drupal_map_assoc(range(1, 1000)),
    '#required' => TRUE
  );
  
  // islocked
  $form['islocked'] = array(
    '#type' => 'checkbox',
    '#title' => t('Locked'),
    '#description' => t('Whether this score is locked from editing'),
    '#default_value' => $edit['islocked'],
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => isset($score) ? 'Update' : 'Save',
    '#attributes' => array('class' => 'btn'),
  );

  
  $form['_score'] = array('#type' => 'value', '#value' => $edit);
  $form['created'] = array('#type' => 'value', '#value' => time());
  if(isset($score)) {
      $form['state'] = array('#type' => 'value', '#value' => 'update');
      $form['updated'] = array('#type' => 'value', '#value' => time());
      $form['_loaded'] = array('#type' => 'value', '#value' => $score);
  }

  return $form;
}

function nurspri_school_score_form_validate($form, &$form_state) {

}

function nurspri_school_score_form_submit($form, &$form_state) {
  //dsm($form_state['values']);
  if (!empty($form_state['ahah_submission'])) {
    //dsm($form_state['values']);
    return;
  }
  // set testcount = 0
  $cascores = explode($form_state['values']['ca_score']);
  $cascore = array_sum($cascores);
  $score = $form_state['values']['_score'];
  $score_table = 'score';
  $loaded = $form_state['values']['_loaded'];
  $op = $form_state['values']['op'];

  $success = FALSE;
    if($op == 'Update') {
    // it's an edit
      db_query("UPDATE {score} SET uid = %d, programme = %d, course = %d, type = '%s', islocked = %d, academicsession = '%s', overall = %d, score = %d, cascore = '%s', updated = %d WHERE id = %d", $form_state['values']['course_holder']['uid'], $form_state['values']['programme'], $form_state['values']['programme_holder']['course'], $form_state['values']['type'], $form_state['values']['islocked'], $form_state['values']['academicsession'],
          $form_state['values']['overall'], $form_state['values']['exam_score'], $form_state['values']['ca_score'], $form_state['values']['updated'], $loaded['id']);
      
    $success = TRUE;
    if($success) {
      // TODO: grade update score
      $updated_score = array(
        'programme' => $form_state['values']['programme'],
        'course' => $form_state['values']['programme_holder']['course'],
        'uid' => $form_state['values']['course_holder']['uid'],
        'islocked' => $form_state['values']['islocked'],
        'academicsession' => $form_state['values']['academicsession'],
        'overall' => $form_state['values']['overall'],
        'exam_score' => $form_state['values']['exam_score'],
        'ca_score' => $form_state['values']['ca_score'],
        'submittedby' => ''
      );
      // module_invoke('acm_school', 'grade_update_score', $form_state['values']);
      drupal_set_message('Update completed successfully');
      return;
    }
      drupal_set_message('An error occurred while updating Score');
      return FALSE;
  }

  if($op == 'Save') {
    //drupal_write_record($score_table, $form_state['values']);
    db_query("INSERT INTO {score} (uid, programme, course, islocked, type, academicsession, overall, score, cascore, created) VALUES (%d, %d, %d, %d, '%s',  %d, %d, '%s', %d, %d)", $form_state['values']['course_holder']['uid'], $form_state['values']['programme'], $form_state['values']['programme_holder']['course'], $form_state['values']['islocked'], $form_state['values']['type'],
      $form_state['values']['academicsession'], $form_state['values']['overall'], $form_state['values']['exam_score'], $form_state['values']['ca_score'], $form_state['values']['created']);  

    $success = TRUE;
    if($success) {
      // TODO Invoke hook to grade new Score
      $new_score = array(
        'programme' => $form_state['values']['programme'],
        'course' => $form_state['values']['programme_holder']['course'],
        'uid' => $form_state['values']['course_holder']['uid'],
        'islocked' => $form_state['values']['islocked'],
        'academicsession' => $form_state['values']['academicsession'],
        'overall' => $form_state['values']['overall'],
        'exam_score' => $form_state['values']['exam_score'],
        'ca_score' => $form_state['values']['ca_score'],
        'submittedby' => 0
      );
      // grade_new_score
      drupal_set_message('Score created successfully');
    }
  }
}

/**
 * Implementation of hook_views_api(), register view API information so include files can be loaded
 */
function nurspri_school_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'nurspri_school') . '/views',
  );
}










