<?php
/**
 * Implements hook_menu()
 */
function high_school_menu() {
	$items = array();
	// Menu is only available when this module is enabled
	$items['admission/apply/class'] = array(
		'title' => t('Application to [School name]'),
		'description' => t('Student application for admission to a school'),
		'page callback' => 'drupal_get_form', 
		'page arguments' => array('high_school_admission_class_form'),
		'access callback' => TRUE,
		'access arguments' => array('')
	);
	$items['admission/apply/sponsor'] = array(
		'title' => t('Application to [School name]'),
		'description' => t('Student application for admission to a school'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('high_school_admission_sponsor_form'),
		'access callback' => TRUE,
		'access arguments' => array('')
 	);
	$items['admission/apply/nextofkin'] = array(
		'title' => t('Application to [School name]'),
		'description' => t('Student application for admission to a school'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('high_school_admission_nextofkin_form'),
		'access callback' => TRUE,
		'access arguments' => array('')
	);
	$items['admission/apply/health'] = array(
		'title' => t('Application to [School name]'),
		'description' => t('Student application for admission to a school'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('high_school_admission_health_form'),
		'access callback' => TRUE,
		'access arguments' => array('')
	);
	
	// edit a student grade
	$items['admin/settings/school/grade/%acm_school_grade/edit'] = array(
		'title' => t('Edit grade'),
		'description' => t('Edit a student grade'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('high_school_grade_form', 4),
		'type' => MENU_CALLBACK,
		'load arguments' => array(4)
	);
	// edit a student score
	$items['admin/settings/school/score/%acm_school_score/edit'] = array(
		'title' => t('Edit score'),
		'description' => t('Edit a student score'),
		'page callback' => 'drupal_get_form',
		'page arguments' => array('high_school_score_form', 4),
		'type' => MENU_CALLBACK,
		'load arguments' => array(4)
	);
	return $items;
}
/**
 * Implements hook_acm_roles()
 *
 * Defines default roles needed in a high school 
 */
function high_school_acm_roles() {
	return array('Head teacher');
}
/**
 * Implements hooh_acm_roles_perm()
 *
 * Assigns permission(s) to role(s)
 */
function high_school_acm_roles_perm(){
	return array(
		'Head teacher' => 'administer school settings',
		'Head teacher' => 'view student application',
		'Head teacher' => 'view student applications', // view all student applications
		'Head teacher' => 'setup school',
	);
}
/**
 * Implements hook_school_settings()
 *
 */
function high_school_school_settings() {
	$settings['type'] = 'configure';
	$settings['configure']['admission'] = array(
		'title' => t('Set admission status'),
		'callback url' => 'admin/settings/school/admission/status'
	);
	$settings['configure']['users'] = array(
		'title' => t('Configure users'),
		'callback url' => 'admin/settings/school/users'
	);
	$settings['configure']['fees'] = array(
		'title' => t('Configure fees'),
		'callback url' => 'admin/settings/school/fees'
	);
	$settings['configure']['grade'] = array(
		'title' => t('Configure grade system'),
		'callback url' => 'admin/settings/school/grade/gradingsystem'
	);
	
	$settings['configure']['school_settings'] = drupal_get_form('high_school_school_settings_form'); 
	
	return $settings;
}
function high_school_school_settings_form() {
	$form['#attributes'] = array('class' => 'form-horizontal');
	return system_settings_form($form);
}

/**
 * Implements hook_admission_settings()
 */
function high_school_admission_settings($type) {
	$settings['type'] = 'admission';
	$settings['admission']['configure'] = array(
		'title' => t('Configure'),
		'callback url' => 'admin/settings/school'
	);
	$settings['admission']['view application'] = array(
		'title' => t('View applications'),
		'callback url' => 'admission/applications'
	);
	if($type == 'status') {
		$settings['admission']['admission_status_form'] = drupal_get_form('high_school_admission_settings_form');
	}
	return $settings;
} 
function high_school_admission_settings_form() {
	$form['#attributes'] = array('class' => 'form-horizontal');
	$form['admission_status'] = array(
		'#type' => 'select',
		'#title' => t('Admission Status'),
		'#default_value' => variable_get('admission_status':'');
		'#options' => array('Opened' ,'Closed'),
	);
	/* $form['academic_session'] = array(
		'#type' => 'textfield',
		'#title' => t('Academic session'),
		'#default_value' => variable_get('academic_session', ''),
		'#description' => t('Set the current academic session')
	); */
	$form['#submit'][] = 'high_school_admission_settings_form_submit';
	
	return system_settings_form($form);
}
function high_school_admission_settings_form_submit() {

}
/**
 * implements hook_term_type
 */
function high_school_term_type() {
  //return variable_set('term_type', '');
}
/**
 * Implements hook_faculty_settings 
 */
function high_school_faculty_settings($type) {
  
}
function high_school_faculty_form(&$form_state, $faculty = NULL, $edit = NULL) {
  
}
function high_school_faculty_form_validate($form, &$form_state) {
   
}
function high_school_faculty_form_submit($form, &$form_state) {
  
}
/**
 * Faculty department add and edit form 
 */
function high_school_faculty_dept_form(&$form_state, $dept = NULL, $edit = NULL) {

}
/**
 * Validate Add department form
 */
function high_school_faculty_dept_form_validate($form, &$form_state) {

}
function high_school_faculty_dept_form_submit($form, &$form_state) {
   
}
/**
 * Implements hook_department_settings 
 */
function high_school_department_settings($type) {
  
}
function high_school_programme_settings($type) {
  
}
function high_school_programme_form(&$form_state, $programme = NULL, $edit = NULL) {

}
function high_school_programme_form_validate($form, &$form_state) {

}
function high_school_programme_form_submit($form, &$form_state) {

}
function high_school_student_application_table_info() {
	$table['course_info'] = array(
	'primary key' => 'id'
	);
	return $table;
}

/**
 * Course form to save or edit a course for a department and programme
 * 
 * A course can be under a programme and also taught in a specific 
 * department
 * 
 * @param type $form_state
 * @param type $edit
 * @param type $dept 
 */
function high_school_addsubject_form(&$form_state, $subject = NULL, $edit = NULL) {
    $edit = (empty($form_state['values'])) ? (array)$subject : $form_state['values'];
  
	if($edit) {
		drupal_set_title('Edit course');
	}else {
		drupal_set_title('Add course');
	}
	$form['#attributes'] = array('class' => 'form-horizontal');
	// course title
	$form['title'] = array(
		'#type' => 'textfield',
		'#title' => t('Course title'),
		'#description' => t('The course title'),
		'#default_value' => $edit['title'],
		'#required' => TRUE
	);
   // level
	$level = module_invoke('high_school', 'academic_level');
	$form['level'] = array(
		'#type' => 'select',
		'#title' => t('Academic level'),
		'#options' => $level,
		'#default_value' => $edit['level'],
		'#required' => TRUE
	);
	$form['code'] = array(
		'#type' => 'textfield',
		'#title' => t('Subject code'),
		'#description' => t('The subject code'),
		'#default_value' => $edit['code'],
		'#required' => TRUE
	);
	/*  // course type
	$form['type'] = array(
		'#type' => 'select',
		'#title' => t('Course type'),
		'#description' => t('Core, required or elective'),
		'#options' => drupal_map_assoc(array('Core', 'Required', 'Elective')), // core, required or elective
		'#default_value' => $edit['type'],
		'#required' => TRUE
	); */
  
	$form['session'] = array(
		'#type' => 'select',
		'#title' => t('Academic session'),
		'#description' => t('The academic session this course is available for'),
		'#options' => AcademicSession::listAcademicSession(),
		'#default_value' => $edit['session'],
		'#required' => TRUE
	);
	// lecturer
	$teachers = acm_school_get_users_in_a_role(37);
	$form['teacherincharge'] = array(
		'#type' => 'select',// separate by a comma
		'#title' => t('Course Teacher'),
		'#description' => t('Course assigned to a teacher'),
		'#options' => $teachers, // a list of teachers in the school
		'#default_value' => $edit['lecturerincharge'],
		'#required' => TRUE
	);
	/*
	// course prerequisites
	$form['prerequisites'] = array(
		'#type' => 'textfield', // seperat with a comma
		'#title' => t('Course prerequisites'),
		'#description' => t('Courses this course depend on to have been taken. Please separate each item with a comma. E.g Maths for Economics, Finance'),
		'#default_value' => $edit['prerequisites']
	);
	$form['prerequisitecodes'] = array(
		'#type' => 'textfield',
		'#title' => t('Course prerequisite codes'),
		'#description' => t('Course codes this course depend on to have been taken. Please separate each item with a comma. E.g ECO 101, ECO 203'),
		'#default_value' => $edit['prerequisitecodes']
	);
	$form['numberofcas'] = array(
		'#type' => 'texfield',
		'#title' => t('Course title'),
		'#description' => t('A setting to configure total number of CA(continuous assessment) for this course'),
		'#default_value' => $edit['numberofcas']
	);
	
	$form['test_score_id'] = array(
		'#type' => 'textfield',
		'#title' => t('Test score'),
		'#description' => t('This course test score'),
		'#default_value' => $edit['test_score_id']
	);
	*/
	$form['exam_score_id'] = array(
		'#type' => 'textfield',
		'#title' => t('Exam score'),
		'#description' => t('This course exam score'),
		'#default_value' => $edit['exam_score_id']
	);
	$form['maxexammark'] = array(
		'#type' => 'textfield',
		'#title' => t('Maximum exam mark'),
		'#description' => t('An exam score maximum mark. For example, 100 is the maximum mark for an exam score of 50/100'),
		'#default_value' => $edit['maxexammark']
	);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => isset($course) ? 'Update' :  'Save',
		'#attributes' => array('class' => 'btn'),
	);
  
	$form['_subject'] = array('#type' => 'value', '#value' => $edit);
	if(!isset($subject)) {
		$form['created'] = array('#type' => 'value', '#value' => time());
	} 
	else {
		$form['updated'] = array('#type' => 'value', '#value' => time());
		$form['_loaded'] = array('#type' => 'value', '#value' => $subject);
	}
	return $form;
}
function high_school_addsubject_form_validate($form, &$form_state) {

    $subject = $form_state['values']['_subject'];
    $subject_title = $form_state['values']['title'];
    $subject_code = $form_state['values']['code'];
    $fields = drupal_schema_fields_sql('academic_course');
    $op = $form_state['values']['op'];

    if($op != 'Update') {
        // does course title exist?
        if(in_array($course_title, Course::listCourses($fields))) {
            form_error($form['title'], t('The course title @title already exist', array('@title' => $subject_title)));
        }
        // does course code exist?
        if(in_array($subject_code, Course::listCourses($fields))) {
            form_error($form['code'], t('The course code @name already exist.', array('@code' => $subject_code)));
        }
    }
}
function high_school_addsubject_form_submit($form, &$form_state) {
	$subject = $form_state['values']['_subject'];
	$loaded = $form_state['values']['_loaded'];
	$course_table = 'academic_course';
	$success = FALSE;

	if(!empty($subject)) {
	db_query("UPDATE {academic_course} SET title = '%s',  code = '%s', level = '%s', session = '%s', lecturerincharge = '%s', exam_score_id = %d, maxexammark = %d, updated = %d WHERE id = %d", $form_state['values']['title'], $form_state['values']['code'],  $form_state['values']['level'], $form_state['values']['session'], $form_state['values']['teacherincharge'],
	$form_state['values']['exam_score_id'], $form_state['values']['maxtestmark'],  $form_state['values']['updated'], $loaded['id']);
	$success = TRUE;
		if($success) {
			drupal_set_message('Update completed successfully');
			return;
		}
	}
  
	$success = drupal_write_record($course_table, $form_state['values']);
	//$course_id = db_last_insert_id($course_table, 'id');
	$course_id = db_fetch_object(db_query("SELECT MAX(id) as id FROM {$course_table}"));
  
	// insert into student_course
	//db_query("INSERT INTO {student_course} (academic_courseid, registered, totalcreditload, uid) VALUES (%d, %d, %d, %d)", $course_id, 0, $form_state['values']['creditpoint'], 0);

	if($success) {
		if(isset($course_id)) {
			call_user_func_array('acm_school_create_batch_course_content', array($course_id));
		}
	} else {
		drupal_set_message("Something dangerous happened! Couldn't save new Course", 'error');
	}
}
function high_school_course_settings($subject) {
	$form['#attributes'] = array('class' => 'form-horizontal');
	$form['exam_maximum_mark'] = array(
	'#type' => 'textfield',
	'#title' => t('Exam maximum mark'),
	'#default_value' => variable_get('exam_maximum_mark', (int)'')
	);

	return system_settings_form($form);
}
/**
 * Implements hook_grade_settings 
 */
function high_school_grade_settings($type){
 
}
function high_school_gradingsystem_settings_form(&$form_state) {
	$form['#attributes'] = array('class' => 'form-horizontal');
  	return system_settings_form($form);
}

/**
 * Implements hook_grade_local_country
 *
 * Grade point system by local country as seen here: http://en.wikipedia.org/wiki/Grading_systems_by_country
 */
function high_school_grade_local_country($country_code) {

}

/**
 * Implements hook_grade_ects
 *
 * Grade point system by ECTS http://en.wikipedia.org/wiki/ECTS_grading_scale
 */
function high_school_grade_ects() {

}

/**
 * Implements hook_grade_wes
 *
 * Grade point system by WES as seen at http://wenr.wes.org/2011/08/wenr-julyaugust-2011-practical-information/
 */
function high_school_grade_wes() {

}

/**
 * Computes student's current GPA. Computes student's GPA
 * for the current semester/session
 */
function high_school_compute_current_gpa($uid, $latest_score) {
  // get the current grade system and switch on that.
  // get current semester or session.
  // get the courses taken by the student in that semester.
  // get the courses credit point.
  // get the grade gotten on each course by student. course => grade
  // get the gpe on each grade.
  // calculate and return gpa 
}

/**
 * Computes student's cumulative GPA
 */
function high_school_compute_cumulative_gpa($uid) {

}

function high_school_gradepoint_settings_form() {
	$form['#attributes'] = array('class' => 'form-horizontal');
	return system_settings_form($form);
}

function high_school_dept_gradepoint_settings_form() {
	$form['#attributes'] = array('class' => 'form-horizontal');
	return system_settings_form($form);
}
function high_school_grade_form(&$form_state, $grade = NULL, $edit = NULL ) {
	$edit = (empty($form_state['values']))? $grade : $form_state['values'];

	if($edit) {
		drupal_set_title('Edit Grade');
	}else {
		drupal_set_title('Add Grade');
	}
	$form['#attributes'] = array('class' => 'form-horizontal');
	$students = acm_school_get_users_in_a_role(29);

	// student uid
	$form['uid'] = array(
		'#type' => 'select',
		'#title' => t('Student'),
		'#description' => t('Select student to grade'),
		'#options' => $students,
		'#default_value' => $edit['uid'],
		'#required' => TRUE
	);
	// automatically populated when student uid is selected
	$form['course'] = array(
		'#type' => 'select',
		'#title' => t('Course'),
		'#description' => t('Student course'),
		'#options' => array(),
		'#default_value' => $edit['course'],
		'#required' => TRUE 
	);
	$form['grade'] = array(
		'#type' => 'textfield',
		'#title' => t('Grade'),
		'#description' => t('Grade representation of a score based on Grading system'),
		'#default_Value' => $edit['grade']
	);
	$form['exam_score_id'] = array(
		'#type' => 'textfield',
		'#title' => t('Exam score'),
		'#description' => t('Student exam score'),
		'#default_value' => $edit['exam_score_id'],
		'#required' => TRUE 
	);

	$form['totalscore'] = array(
		'#type' => 'textfield',
		'#title' => t('Total score'),
		'#description' => t('Total score (testscores + exam score)'),
		'#default_value' => $edit['totalscore']
	);

	$form['submittedby'] = array(
		'#type' => 'select',
		'#title' => t('Submitted by'),
		'#description' => t('Select the lecturer who submitted the grade'),
		'#default_value' => $edit['submittedby'],
		'#options' => array(),
		'#required' => TRUE
	);

	$form['submitted'] = array(
		'#type' => 'checkbox',
		'#title' => t('Submitted for approval?'),
		'#description' => t('Whether this grade is submitted for approval or not'),
		'#default_value' => $edit['submitted'],
		'#required' => TRUE
	);
	$form['approved'] = array(
		'#type' => 'checkbox',
		'#title' => t('Is grade approved?'),
		'#description' => t('Whether this grade has been approved or not'),
		'#default_value' => $edit['approved']
	);
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => isset($score) ? 'Update' : 'Save',
		'#attributes' => array('class' => 'btn'),
	);
	$form['_grade'] = array('#type' => 'value', '#value' => $edit);
	$form['created'] = array('#type' => 'value', '#value' => time());
	if(isset($grade)) {
	  $form['state'] = array('#type' => 'value', '#value' => 'update');
	  $form['updated'] = array('#type' => 'value', '#value' => time());
	  $form['_loaded'] = array('#type' => 'value', '#value' => $grade);
	}

	return $form;
}
function high_school_grade_form_validate($form, &$form_state) {

}
function high_school_grade_form_submit($form, &$form_state) {

}
/**
 * @deprecated
 * @return type 
 */
function high_school_grade_settings_form() {
  if($type == 'gradingsystem') {

    return high_school_gradingsystem_settings_form();
  }
}

/**
 * Implements hook_fees_type 
 */
function high_school_fees_type() {
  return array('');
}

/**
 * implements hook_faculty 
 */
function high_school_faculty() {
  
}

/**
 * implements hook_department 
 */
function high_school_department() {
  
}

/**
 * Implements hook_grade 
 */
function high_school_grade() {
  $grade_view = views_get_view('high_grade_view');
  return $grade_view;
}

/**
 * Implements hook_fees 
 */
function high_school_fees() {
  
}

/**
 * Implements hook_admission 
 * 
 * Landing page of Admission
 */
function high_school_admission() {
  $admission_view = views_get_view('high_admission_view');
  return $admission_view;
}

/**
 * Implements hook_fees_catalog 
 */
function high_school_fees_catalog_info() {
  return array('');
}

/**
 * Implements hook_acm_student_application 
 */
function high_school_acm_student_application() {
  global $user;
  // profile = StudentProfile::getStudentProfile($user);
  // courseinfo = CourseInfo::getCourseInfo($user);
  // student_sponsorinfo = SponsorsInfo::getSponsors($user);
  // student_nextofkininfo = NextOfKinInfo::getNextOfKinInfo($user);
  // student_healthinfo = HealthInfo::getHealthInfo($user);
  // student_results = ExaminationResult::getResults($user);
  // studentApplication = new StudentApplication($user);
    
  switch($_GET['edit']) {
  case 'app':
      // $student_application object for the current student
      $profile = acm_school_profile_load($user->uid);
      return drupal_get_form('acm_school_student_profile_form', (array)$profile->profile, NULL);
  }

  switch($_GET['app']) {
  case 'sponsor':
      drupal_set_title('Sponsor');
      $studentApplication = views_get_view('high_student_application_view');
      $studentApplication->display = 'sponsor';
      break;
    case 'class':
      drupal_set_title('Class');
        $studentApplication = views_get_view('high_student_application_view');
        $studentApplication->display = 'course';
        break;
    case 'nextofkin':
      drupal_set_title('Next of Kin');
        $studentApplication = views_get_view('high_student_application_view');
        $studentApplication->display = 'nextofkin';
        break;
    default:
        $studentApplication = views_get_view('high_student_application_view');
        $studentApplication->display = 'default';
        break;
  }
  return $studentApplication;
}

/**
 * Implements hook_student_application_items
 */
function high_school_student_application_items() {
  $items = array();
  $items['sponsor'] = array(
    'data' => l('Sponsor Information', 'application/sponsor')
  );
  /*$items['course'] = array(
    'data' => l('Course Information', 'application/course')
); */
  return $items;

}
/**
 * Proposal: A proposal to replace acm_school_admission_application_callback
 * 
 * This hook defines the structure of admission application steps that 
 * can be implemented per school type. At the end of every application step,
 * this hook is looked up to determine what application form is next
 * 
 * @example 
 */
function high_school_admission_application_info() {
  $application_form = array(
    
    'class' => array(
      'title' => 'class',
      'form_id' => 'high_school_admission_class_form'
    ),
    'sponsor' => array(
      'title' => 'sponsor',
      'form_id' => 'high_school_admission_sponsors_form'
    ),
    'nextofkin' => array(
      'title' => 'nextofkin',
      'form_id' => 'high_school_admission_nextofkin_form'
    ),
    'health' => array(
      'title' => 'health',
      'form_id' => 'high_school_admission_health_form'
    ),
    // to be implemented
    /*'examresults' => array(
      'title' => 'examresults',
      'form_id' => 'high_school_admission_examresults_form'
    )*/
  );
  return $application_form;
}
/**
 * Implements hook_admission_form_id
 * @return string 
 */
function high_school_admission_form_id() {
  return 'high_school_admission_form';
}

//function high_school_admission_course_edit($course_info) {
  //$course_info->course['state'] = 'edit';
  //return high_school_admission_course_form($profile->profile);
  //return drupal_get_form('high_school_admission_course_form', $course_info, NULL, NULL);
//}

function high_school_admission_course_form(&$form_state, $course_info, $steps_order, $hook) {
  
}
function high_school_admission_course_form_submit($form, &$form_state) {
  $success = TRUE;
  if($success) {
    drupal_goto('admission/apply', 'step=' . $next . '&c=' . $_GET['c']); 
  }
}

/**
 * Saves or update course_info 
 */
function high_school_course_info_save() {
  
}

/**
 * Menu callback for admission/apply/sponsor
 * @return string 
 */
function high_school_admission_sponsors_form(&$form_state, $sponsors_info, $steps_order, $hook) {
  $edit = (empty($form_state['values'])) ? (array)$sponsors_info : $form_state['values'];
  
  $form['#attributes'] = array('class' => 'form-horizontal');
  $form['sponsors'] = array(
    '#type' => 'markup',
    '#value' => '<div style="background:#f6f6f2; padding:5px">Sponsors Information</div>',
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Full names'),
    '#default_value' => $edit['name'],
    '#required' => TRUE,
  );
  $form['address1'] = array(
    '#type' => 'textfield',
    '#title' => t('Address1'),
    '#default_value' => $edit['address1'],
    '#required' => TRUE,
  );
  $form['address2'] = array(
    '#type' => 'textfield',
    '#title' => t('Address2'),
    '#default_value' => $edit['address2'],
  );
  $form['nationality'] = array(
    '#type' => 'select',
    '#title' => t('Nationality'),
    '#options' => array(0 => 'Nigeria', 1 => 'Togo'),
    '#default_value' => $edit['nationality'],
    '#required' => TRUE,
  );
  /*$form['nationality_other'] = array(
    '#type' => 'textfield',
    '#title' => t('Other nationality'),
    
    '#process' => array('views_process_dependency'),
    '#dependency' => array('edit-nationality' => array('Togo')),
  );*/
  $form['state'] = array(
    '#type' => 'select',
    '#title' => t('State'),
    '#options' => array(0 => 'Other'),
    '#default_value' => $edit['state'],
    '#required' => TRUE,
  );
  $form['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#default_value' => $edit['phone'],
  );
  $form['mobile'] = array(
    '#type' => 'textfield',
    '#title' => t('Mobile'),
    '#default_value' => $edit['mobile'],
    '#required' => TRUE
  );
  /*$form['skip'] = array(
    '#type' => 'value',
    '#value' => l('Skip', '/admission/apply?step=nextofkin', array('attributes' => array('class' => 'btn btn-link'))),
  );*/
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Next',
    '#attributes' => array('class' => 'btn')
  );
  
  $form['_current'] = array('#type' => 'value', '#value' => $hook);
  $form['_next'] = array('#type' => 'value', '#value' => 'nextofkin');
  $form['_steps'] = array('#type' => 'value', '#value' => $steps_order);
  $form['_sponsors_info'] = array('#type' => 'value', '#value' => $sponsors_info);
  
  return $form;
}

function high_school_admission_sponsors_form_submit($form, &$form_state) {
  
  $current = $form_state['values']['_current'];
  $next = $form_state['values']['_next'];
  $sponsors_info = $form_state['values']['_sponsors_info'];
  
  $sponsors_info_table = 'sponsors_info';
  $success = FALSE;
  
  if(!empty($sponsors_info)) {
    // it's an edit
    $success = drupal_write_record($sponsors_info_table, $sponsors_info, 'id');
    if($success) {
      drupal_set_message('Update completed successfully');
      return;
    }
  }
  
  drupal_write_record($sponsors_info_table, $form_state['values']);
  // also update student_application_tracker
  $tracker_data = array('email' => base64_decode($_GET['c']), 'step' => $next);
  drupal_write_record('student_application_tracker', $tracker_data, 'email');  
  
  // update student_application
  $student_application['sponsors_infoid'] = db_last_insert_id($sponsors_info_table, 'id');
  drupal_write_record('student_application', $student_application, 'id');
  
  $success = TRUE;
  if($success) {
    drupal_goto('admission/apply', 'step=' . $next . '&c=' . $_GET['c']); 
  }
}

/**
 * Save or update sponsors_info 
 */
function high_school_sponsors_save() {
  
}

function high_school_admission_nextofkin_form(&$form_state, $nextofkin_info, $steps_order, $hook) {
  $edit = (empty($form_state['values'])) ? (array)$nextofkin_info : $form_state['values'];
  
  // register previous form as sponsors (this is kind of optional)
  $form['#attributes'] = array('class' => 'form-horizontal');
  $form['nextofkin'] = array(
    '#type' => 'markup',
    '#value' => '<div style="background:#f6f6f2; padding:5px">Next of kin Information</div>',
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Full names'),
    '#default_value' => $edit['name'],
    '#required' => TRUE,
  );
  $form['address1'] = array(
    '#type' => 'textfield',
    '#title' => t('Address1'),
    '#default_value' => $edit['address1'],
    '#required' => TRUE,
  );
  $form['address2'] = array(
    '#type' => 'textfield',
    '#title' => t('Address2'),
    '#default_value' => variable_get('address2', ''),
  );
  $form['relationship'] = array(
    '#type' => 'select',
    '#title' => t('Relationship'),
    '#options' => NextOfKinRelationship::listNextOfKinRelationship(),
    '#default_value' => $edit['relationship'],
    '#required' => TRUE,
  );
  $form['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#default_value' => $edit['phone'],
  );
  $form['mobile'] = array(
    '#type' => 'textfield',
    '#title' => t('Mobile'),
    '#default_value' => $edit['mobile'],
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Next',
    '#attributes' => array('class' => 'btn')
  );
  
  $form['_current'] = array('#type' => 'value', '#value' => $hook);
  $form['_next'] = array('#type' => 'value', '#value' => 'health');
  $form['_steps'] = array('#type' => 'value', '#value' => $steps_order);
  $form['_nextofkin_info'] = array('#type' => 'value', '#value' => $nextofkin_info);
  
  return $form;
}

function high_school_admission_nextofkin_form_submit($form, &$form_state) {
  
  $next = $form_state['values']['_next'];
  $nextfkin_info = $form_state['values']['_nextofkin_info'];
  
  $nextofkin_info_table = 'next_of_kin_info';
  $success = FALSE;
  
  if(!empty($nextfkin_info)) {
    // it's an edit
    $success = drupal_write_record($nextofkin_info_table, $nextfkin_info, 'id');
    if($success) {
      drupal_set_message('Update completed successfully');
      return;
    }
  }
  
  drupal_write_record($nextofkin_info_table, $form_state['values']);
  // also update student_application_tracker
  $tracker_data = array('email' => base64_decode($_GET['c']), 'step' => $next);
  drupal_write_record('student_application_tracker', $tracker_data, 'email');
  
  // update student_application
  $student_application['next_of_kin_infoid'] = db_last_insert_id($nextofkin_info_table, 'id');
  drupal_write_record('student_application', $student_application, 'id');
  
  $success = TRUE;
  if($success) {
    drupal_goto('admission/apply', 'step=' . $next . '&c=' . $_GET['c']); 
  }
}

/**
 * Save or update nextofkin_info 
 */
function high_school_nextofkin_save() {
  
}

function high_school_admission_health_form(&$form_state, $health_info, $steps_order, $hook) {
  $form['#attributes'] = array('class' => 'form-horizontal');
  $form['sponsors'] = array(
    '#type' => 'markup',
    '#value' => '<div style="background:#f6f6f2; padding:5px">Health Information</div>',
  );
  $form['status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#options' => HealthStatus::listHealthStatus(),
    '#default_value' => $edit['health'], 
    '#required' => TRUE,
  );
  $form['disabilities'] = array(
    '#type' => 'select',
    '#title' => t('Disabilities'),
    '#options' => HealthDisabilities::listHealthDisabilities(),
    '#default_value' => $edit['disabilities'], 
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Next',
    '#attributes' => array('class' => 'btn')
  );
  
  $form['_current'] = array('#type' => 'value', '#value' => $hook);
  $form['_next'] = array('#type' => 'value', '#value' => 'finished');
  $form['_steps'] = array('#type' => 'value', '#value' => $steps_order);
  $form['_health_info'] = array('#type' => 'value', '#value' => $health_info);
  
  return $form;
}

function high_school_admission_health_form_submit($form, &$form_state) {
  $next = $form_state['values']['_next'];
  $health_info = $form_state['values']['_health_info'];
  
  $health_info_table = 'health_info';
  $success = FALSE;
  
  if(!empty($health_info)) {
    // it's an edit
    $success = drupal_write_record($health_info_table, $health_info, 'id');
    if($success) {
      drupal_set_message('Update completed successfully');
      return;
    }
  }
  
  drupal_write_record($health_info_table, $form_state['values']);
  // also update student_application_tracker
  $tracker_data = array('email' => base64_decode($_GET['c']), 'step' => $next);
  drupal_write_record('student_application_tracker', $tracker_data, 'email');
  
  // update student_application
  $student_application['health_infoid'] = db_last_insert_id($health_info_table, 'id');
  drupal_write_record('student_application', $student_application, 'id');
  
  $success = TRUE;
  if($success) {
    drupal_goto('admission/apply', 'step=' . $next . '&c=' . $_GET['c']); 
  }
}

/**
 * Save or update health_info
 */
function high_school_health_save() {
  
}
/**
 * @todo Implement examresults upload functionality and submit callback
 * 
 * @param type $form_state
 * @param type $profile
 * @param type $steps_order
 * @param type $hook
 * @return string 
 */
function high_school_admission_examresults_form(&$form_state, $profile, $steps_order, $hook) {
  
}

function high_school_admission_examresults_form_submit($form, &$form_state) {
 
  //return $form_state['redirect'] = 'admission/apply/examresults';
}

/**
 * Save or update examresults 
 */
function high_school_examresults_save() {
  
}
/**
 * Implements hook_setup_tasks 
 *
 * @see acm_school_setup
 */
function high_school_setup_tasks() {
  
}
function high_school_setup_faculty_form() {
  
}
function high_school_setup_faculty_form_submit($form, &$form_state) {
  //drupal_goto('setup', 'step=course'); // $steps['next'];
}

function high_school_setup_course_form() {
  $form['#attributes'] = array('class' => 'form-horizontal');
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save and continue',
    '#attributes' => array('class' => 'btn')
  );
  return $form;
}

function high_school_setup_course_form_submit($form, &$form_state) {
  drupal_goto('setup', 'step=finished');
}

/**
 * implements hook_admission_applications_list 
 * 
 * Implementation of a list of admission applications (report)
 */
function high_school_admission_applications_list() {
  $admission_applications = views_get_view('high_admission_applications');
  return $admission_applications;
}

/**
 * Loads the current user course_info object
 * 
 * User must have role Student
 * 
 * @param type $uid 
 */
function high_school_admission_course_load($uid) {
  
}
/**
 * course_info(id) and uid are loaded from uri due to calls to
 * high_school_course_load and acm_school_profile_load
 * 
 * @param type $course 
 */
function high_school_admission_course_edit($uid) {
    // load the course_info object by calling high_school_course_load
    $course_info = high_school_admission_course_load($uid);
    return drupal_get_form('high_school_admission_course_form', $course_info, NULL, NULL); 
}

/**
 * Load course_info object from db
 *
 * @deprecated
 * @see high_school_admission_course_load
 */
function high_school_course_load($uid) {

}

/**
 * Implements hook_academic_level
 */
function high_school_academic_level() {
    return drupal_map_assoc(array(100, 200, 300, 400, 500, 600, 700));
}

/**
 * Implements hook_student_course
 */
function high_school_student_course() {

  drupal_set_title('Course');
  $studentCourses = views_get_view('student_course');
  $studentCourses->display = 'high_school_student_course';

  return $studentCourses;
}

/**
 * Implements hook_score_settings
 *
 */
function high_school_score_settings($type) {
  $settings['type'] = 'score';
  if($type == 'add') {
    $settings['score']['score_form'] = drupal_get_form('high_school_score_form');
  }

  return $settings;
}
function high_school_score_form(&$form_state, $score = NULL, $edit = NULL) {

  $edit = (empty($form_state['values'])) ? (array)$score : $form_state['values'];
  //dsm($edit);
  if($edit) {
    //TODO: drupal js here to tell client-side that it's edit.
    drupal_add_js(array('score' => array('context' => 'score-form-edit')), 'setting');
    drupal_set_title('Edit Score');
  }else {
    drupal_set_title('Add Score');
  }

  $form['#attributes'] = array('class' => 'form-horizontal');
  $subjects = isset($subject) ? Subject::listStudentsByRegisteredSubject($subjects) : array();
  
   $form['course_holder']['subject'] = array(
    '#type' => 'select',
    '#title' => t('Subject'),
    '#description' => t('Select the student subject'),
    '#options' => $subjects,
    '#default_value' => $edit['subject'],
    '#ahah' => array(
      'path' => 'score/ahah/subject/callback',
      'wrapper' => 'subject-wrapper',
      'event' => 'change', // default value: does not need to be set explicitly.
    '#required' => TRUE
    )
  );
  
  $students = (isset($subject) || !empty($subject)) ? StudentSubject::listStudentsByRegisteredSubject($subject, 'uid') : array(955 => 'Kayode Odeyemi');

  // @todo Lookup profile table using student uids to retrieve matching
  // firstname and lastname.

  //uid
  $form['course_holder']['uid'] = array(
    '#type' => 'select',
    '#title' => t('Student'),
    '#description' => t('Select the student to score'),
    '#options' => $students,
    '#default_value' => $edit['uid'],
    '#required' => TRUE
  );
  $form['academicsession'] = array(
    '#type' => 'select',
    '#title' => t('Academic session'),
    '#description' => t('Select the academic session this score is for.'),
    '#options' => AcademicSession::listAcademicSession(),
    '#default_value' => $edit['academicsession'],
    '#required' => TRUE
  );
  $form['exam_score'] = array(
    '#type' => 'textfield',
    '#title' => t('Exam score'),
    '#description' => t('The actual score value'),
    '#default_value' => $edit['exam_score'],
  );
  // islocked
  $form['islocked'] = array(
    '#type' => 'checkbox',
    '#title' => t('Locked'),
    '#description' => t('Whether this score is locked from editing'),
    '#default_value' => $edit['islocked'],
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => isset($score) ? 'Update' : 'Save',
    '#attributes' => array('class' => 'btn'),
  );
 
  $form['_score'] = array('#type' => 'value', '#value' => $edit);
  $form['created'] = array('#type' => 'value', '#value' => time());
  if(isset($score)) {
      $form['state'] = array('#type' => 'value', '#value' => 'update');
      $form['updated'] = array('#type' => 'value', '#value' => time());
      $form['_loaded'] = array('#type' => 'value', '#value' => $score);
  }
  return $form;
}
function high_school_score_form_validate($form, &$form_state) {

}
function high_school_score_form_submit($form, &$form_state) {
  //dsm($form_state['values']);
  if (!empty($form_state['ahah_submission'])) {
    //dsm($form_state['values']);
    return;
  }
  // set testcount = 0
  $score = $form_state['values']['_score'];
  $score_table = 'score';
  $loaded = $form_state['values']['_loaded'];
  $op = $form_state['values']['op'];

  $success = FALSE;
    if($op == 'Update') {
    // it's an edit
      db_query("UPDATE {score} SET uid = %d, course = %d, islocked = %d, academicsession = '%s', score = %d, updated = %d WHERE id = %d", $form_state['values']['course_holder']['uid'],$form_state['values']['course_holder']['subject']  $form_state['values']['islocked'],  $form_state['values']['academicsession'], $form_state['values']['exam_score'],  $form_state['values']['updated'], $loaded['id']);
      
    $success = TRUE;
    if($success) {
      // TODO: grade update score
      $updated_score = array(
       
        'course' => $form_state['values']['course_holder']['subject'],
        'uid' => $form_state['values']['course_holder']['uid'],
        'islocked' => $form_state['values']['islocked'],
        'academicsession' => $form_state['values']['academicsession'],
        'exam_score' => $form_state['values']['exam_score'],
        'submittedby' => ''
      );
      // module_invoke('acm_school', 'grade_update_score', $form_state['values']);
      drupal_set_message('Update completed successfully');
      return;
    }
      drupal_set_message('An error occurred while updating Score');
      return FALSE;
  }

  if($op == 'Save') {
    //drupal_write_record($score_table, $form_state['values']);
    db_query("INSERT INTO {score} (uid, course, islocked, academicsession, score, created) VALUES (%d, %d, %d, %s, %d, %d)", $form_state['values']['course_holder']['uid'],  $form_state['values']['course_holder']['subject'], $form_state['values']['islocked'], 
      $form_state['values']['academicsession'], $form_state['values']['exam_score'],$form_state['values']['created']);  

    $success = TRUE;
    if($success) {
      // TODO Invoke hook to grade new Score
      $new_score = array(
       
        'course' => $form_state['values']['course_holder']['subject'],
        'uid' => $form_state['values']['course_holder']['uid'],
        'islocked' => $form_state['values']['islocked'],
        'academicsession' => $form_state['values']['academicsession'],
        'exam_score' => $form_state['values']['exam_score'],
        'submittedby' => 0
      );
      // grade_new_score
      drupal_set_message('Score created successfully');
    }
  }
}

/**
 * Implementation of hook_views_api(), register view API information so include files can be loaded
 */
function high_school_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'high_school') . '/views',
  );
}

